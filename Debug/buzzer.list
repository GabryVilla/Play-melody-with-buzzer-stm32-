
buzzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025dc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002698  08002698  00012698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800272c  0800272c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800272c  0800272c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800272c  0800272c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800272c  0800272c  0001272c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002730  08002730  00012730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002740  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002740  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000092d7  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000171a  00000000  00000000  0002930b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0002aa28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  0002b4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014edf  00000000  00000000  0002be60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae80  00000000  00000000  00040d3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089023  00000000  00000000  0004bbbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d4be2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002574  00000000  00000000  000d4c34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002680 	.word	0x08002680

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002680 	.word	0x08002680

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <BuzzerPlayNote>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
void BuzzerPlayNote(int prescalerfornote, int NoteDurationMs)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8000226:	4b11      	ldr	r3, [pc, #68]	; (800026c <BuzzerPlayNote+0x50>)
 8000228:	2104      	movs	r1, #4
 800022a:	0018      	movs	r0, r3
 800022c:	f001 fa88 	bl	8001740 <HAL_TIM_PWM_Start>

		for(int i = 0; i<NoteDurationMs ; i++)
 8000230:	2300      	movs	r3, #0
 8000232:	60fb      	str	r3, [r7, #12]
 8000234:	e009      	b.n	800024a <BuzzerPlayNote+0x2e>
		{
			TIM2->PSC = prescalerfornote; //change prescaler for have the frequency of our note
 8000236:	2380      	movs	r3, #128	; 0x80
 8000238:	05db      	lsls	r3, r3, #23
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_Delay(1);
 800023e:	2001      	movs	r0, #1
 8000240:	f000 faa6 	bl	8000790 <HAL_Delay>
		for(int i = 0; i<NoteDurationMs ; i++)
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	3301      	adds	r3, #1
 8000248:	60fb      	str	r3, [r7, #12]
 800024a:	68fa      	ldr	r2, [r7, #12]
 800024c:	683b      	ldr	r3, [r7, #0]
 800024e:	429a      	cmp	r2, r3
 8000250:	dbf1      	blt.n	8000236 <BuzzerPlayNote+0x1a>
		}
		TIM2->PSC=0;
 8000252:	2380      	movs	r3, #128	; 0x80
 8000254:	05db      	lsls	r3, r3, #23
 8000256:	2200      	movs	r2, #0
 8000258:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_TIM_PWM_Stop(&htim2,TIM_CHANNEL_2);
 800025a:	4b04      	ldr	r3, [pc, #16]	; (800026c <BuzzerPlayNote+0x50>)
 800025c:	2104      	movs	r1, #4
 800025e:	0018      	movs	r0, r3
 8000260:	f001 fb4c 	bl	80018fc <HAL_TIM_PWM_Stop>

}
 8000264:	46c0      	nop			; (mov r8, r8)
 8000266:	46bd      	mov	sp, r7
 8000268:	b004      	add	sp, #16
 800026a:	bd80      	pop	{r7, pc}
 800026c:	20000028 	.word	0x20000028

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 fa06 	bl	8000684 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f84a 	bl	8000310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 f924 	bl	80004c8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000280:	f000 f8a4 	bl	80003cc <MX_TIM2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  BuzzerPlayNote(A,500);
 8000284:	23fa      	movs	r3, #250	; 0xfa
 8000286:	005b      	lsls	r3, r3, #1
 8000288:	0019      	movs	r1, r3
 800028a:	208e      	movs	r0, #142	; 0x8e
 800028c:	f7ff ffc6 	bl	800021c <BuzzerPlayNote>
	  HAL_Delay(100);
 8000290:	2064      	movs	r0, #100	; 0x64
 8000292:	f000 fa7d 	bl	8000790 <HAL_Delay>
	  BuzzerPlayNote(B,500);
 8000296:	23fa      	movs	r3, #250	; 0xfa
 8000298:	005b      	lsls	r3, r3, #1
 800029a:	0019      	movs	r1, r3
 800029c:	207e      	movs	r0, #126	; 0x7e
 800029e:	f7ff ffbd 	bl	800021c <BuzzerPlayNote>
	  HAL_Delay(100);
 80002a2:	2064      	movs	r0, #100	; 0x64
 80002a4:	f000 fa74 	bl	8000790 <HAL_Delay>
	  BuzzerPlayNote(C,500);
 80002a8:	23fa      	movs	r3, #250	; 0xfa
 80002aa:	005b      	lsls	r3, r3, #1
 80002ac:	0019      	movs	r1, r3
 80002ae:	20d5      	movs	r0, #213	; 0xd5
 80002b0:	f7ff ffb4 	bl	800021c <BuzzerPlayNote>
	  HAL_Delay(100);
 80002b4:	2064      	movs	r0, #100	; 0x64
 80002b6:	f000 fa6b 	bl	8000790 <HAL_Delay>
	  BuzzerPlayNote(D,500);
 80002ba:	23fa      	movs	r3, #250	; 0xfa
 80002bc:	005b      	lsls	r3, r3, #1
 80002be:	0019      	movs	r1, r3
 80002c0:	20d2      	movs	r0, #210	; 0xd2
 80002c2:	f7ff ffab 	bl	800021c <BuzzerPlayNote>
	  HAL_Delay(100);
 80002c6:	2064      	movs	r0, #100	; 0x64
 80002c8:	f000 fa62 	bl	8000790 <HAL_Delay>
	  BuzzerPlayNote(E,500);
 80002cc:	23fa      	movs	r3, #250	; 0xfa
 80002ce:	005b      	lsls	r3, r3, #1
 80002d0:	0019      	movs	r1, r3
 80002d2:	20be      	movs	r0, #190	; 0xbe
 80002d4:	f7ff ffa2 	bl	800021c <BuzzerPlayNote>
	  HAL_Delay(100);
 80002d8:	2064      	movs	r0, #100	; 0x64
 80002da:	f000 fa59 	bl	8000790 <HAL_Delay>
	  BuzzerPlayNote(F,500);
 80002de:	23fa      	movs	r3, #250	; 0xfa
 80002e0:	005b      	lsls	r3, r3, #1
 80002e2:	0019      	movs	r1, r3
 80002e4:	20b2      	movs	r0, #178	; 0xb2
 80002e6:	f7ff ff99 	bl	800021c <BuzzerPlayNote>
	  HAL_Delay(100);
 80002ea:	2064      	movs	r0, #100	; 0x64
 80002ec:	f000 fa50 	bl	8000790 <HAL_Delay>
	  BuzzerPlayNote(G,500);
 80002f0:	23fa      	movs	r3, #250	; 0xfa
 80002f2:	005b      	lsls	r3, r3, #1
 80002f4:	0019      	movs	r1, r3
 80002f6:	20d3      	movs	r0, #211	; 0xd3
 80002f8:	f7ff ff90 	bl	800021c <BuzzerPlayNote>
	  HAL_Delay(100);
 80002fc:	2064      	movs	r0, #100	; 0x64
 80002fe:	f000 fa47 	bl	8000790 <HAL_Delay>
	  BuzzerPlayNote(A2,500);
 8000302:	23fa      	movs	r3, #250	; 0xfa
 8000304:	005b      	lsls	r3, r3, #1
 8000306:	0019      	movs	r1, r3
 8000308:	2076      	movs	r0, #118	; 0x76
 800030a:	f7ff ff87 	bl	800021c <BuzzerPlayNote>
	  BuzzerPlayNote(A,500);
 800030e:	e7b9      	b.n	8000284 <main+0x14>

08000310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000310:	b590      	push	{r4, r7, lr}
 8000312:	b093      	sub	sp, #76	; 0x4c
 8000314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000316:	2410      	movs	r4, #16
 8000318:	193b      	adds	r3, r7, r4
 800031a:	0018      	movs	r0, r3
 800031c:	2338      	movs	r3, #56	; 0x38
 800031e:	001a      	movs	r2, r3
 8000320:	2100      	movs	r1, #0
 8000322:	f002 f9a5 	bl	8002670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000326:	003b      	movs	r3, r7
 8000328:	0018      	movs	r0, r3
 800032a:	2310      	movs	r3, #16
 800032c:	001a      	movs	r2, r3
 800032e:	2100      	movs	r1, #0
 8000330:	f002 f99e 	bl	8002670 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000334:	2380      	movs	r3, #128	; 0x80
 8000336:	009b      	lsls	r3, r3, #2
 8000338:	0018      	movs	r0, r3
 800033a:	f000 fc65 	bl	8000c08 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800033e:	193b      	adds	r3, r7, r4
 8000340:	2202      	movs	r2, #2
 8000342:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000344:	193b      	adds	r3, r7, r4
 8000346:	2280      	movs	r2, #128	; 0x80
 8000348:	0052      	lsls	r2, r2, #1
 800034a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800034c:	0021      	movs	r1, r4
 800034e:	187b      	adds	r3, r7, r1
 8000350:	2200      	movs	r2, #0
 8000352:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000354:	187b      	adds	r3, r7, r1
 8000356:	2240      	movs	r2, #64	; 0x40
 8000358:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035a:	187b      	adds	r3, r7, r1
 800035c:	2202      	movs	r2, #2
 800035e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2202      	movs	r2, #2
 8000364:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000366:	187b      	adds	r3, r7, r1
 8000368:	2200      	movs	r2, #0
 800036a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800036c:	187b      	adds	r3, r7, r1
 800036e:	2208      	movs	r2, #8
 8000370:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000372:	187b      	adds	r3, r7, r1
 8000374:	2280      	movs	r2, #128	; 0x80
 8000376:	0292      	lsls	r2, r2, #10
 8000378:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800037a:	187b      	adds	r3, r7, r1
 800037c:	2280      	movs	r2, #128	; 0x80
 800037e:	0492      	lsls	r2, r2, #18
 8000380:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000382:	187b      	adds	r3, r7, r1
 8000384:	2280      	movs	r2, #128	; 0x80
 8000386:	0592      	lsls	r2, r2, #22
 8000388:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800038a:	187b      	adds	r3, r7, r1
 800038c:	0018      	movs	r0, r3
 800038e:	f000 fc7b 	bl	8000c88 <HAL_RCC_OscConfig>
 8000392:	1e03      	subs	r3, r0, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000396:	f000 f8ad 	bl	80004f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800039a:	003b      	movs	r3, r7
 800039c:	2207      	movs	r2, #7
 800039e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a0:	003b      	movs	r3, r7
 80003a2:	2202      	movs	r2, #2
 80003a4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a6:	003b      	movs	r3, r7
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ac:	003b      	movs	r3, r7
 80003ae:	2200      	movs	r2, #0
 80003b0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003b2:	003b      	movs	r3, r7
 80003b4:	2102      	movs	r1, #2
 80003b6:	0018      	movs	r0, r3
 80003b8:	f000 ff80 	bl	80012bc <HAL_RCC_ClockConfig>
 80003bc:	1e03      	subs	r3, r0, #0
 80003be:	d001      	beq.n	80003c4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80003c0:	f000 f898 	bl	80004f4 <Error_Handler>
  }
}
 80003c4:	46c0      	nop			; (mov r8, r8)
 80003c6:	46bd      	mov	sp, r7
 80003c8:	b013      	add	sp, #76	; 0x4c
 80003ca:	bd90      	pop	{r4, r7, pc}

080003cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b08e      	sub	sp, #56	; 0x38
 80003d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003d2:	2328      	movs	r3, #40	; 0x28
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	0018      	movs	r0, r3
 80003d8:	2310      	movs	r3, #16
 80003da:	001a      	movs	r2, r3
 80003dc:	2100      	movs	r1, #0
 80003de:	f002 f947 	bl	8002670 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003e2:	231c      	movs	r3, #28
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	0018      	movs	r0, r3
 80003e8:	230c      	movs	r3, #12
 80003ea:	001a      	movs	r2, r3
 80003ec:	2100      	movs	r1, #0
 80003ee:	f002 f93f 	bl	8002670 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003f2:	003b      	movs	r3, r7
 80003f4:	0018      	movs	r0, r3
 80003f6:	231c      	movs	r3, #28
 80003f8:	001a      	movs	r2, r3
 80003fa:	2100      	movs	r1, #0
 80003fc:	f002 f938 	bl	8002670 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000400:	4b30      	ldr	r3, [pc, #192]	; (80004c4 <MX_TIM2_Init+0xf8>)
 8000402:	2280      	movs	r2, #128	; 0x80
 8000404:	05d2      	lsls	r2, r2, #23
 8000406:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000408:	4b2e      	ldr	r3, [pc, #184]	; (80004c4 <MX_TIM2_Init+0xf8>)
 800040a:	2200      	movs	r2, #0
 800040c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800040e:	4b2d      	ldr	r3, [pc, #180]	; (80004c4 <MX_TIM2_Init+0xf8>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000414:	4b2b      	ldr	r3, [pc, #172]	; (80004c4 <MX_TIM2_Init+0xf8>)
 8000416:	22ff      	movs	r2, #255	; 0xff
 8000418:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800041a:	4b2a      	ldr	r3, [pc, #168]	; (80004c4 <MX_TIM2_Init+0xf8>)
 800041c:	2200      	movs	r2, #0
 800041e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000420:	4b28      	ldr	r3, [pc, #160]	; (80004c4 <MX_TIM2_Init+0xf8>)
 8000422:	2200      	movs	r2, #0
 8000424:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000426:	4b27      	ldr	r3, [pc, #156]	; (80004c4 <MX_TIM2_Init+0xf8>)
 8000428:	0018      	movs	r0, r3
 800042a:	f001 f8d1 	bl	80015d0 <HAL_TIM_Base_Init>
 800042e:	1e03      	subs	r3, r0, #0
 8000430:	d001      	beq.n	8000436 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000432:	f000 f85f 	bl	80004f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000436:	2128      	movs	r1, #40	; 0x28
 8000438:	187b      	adds	r3, r7, r1
 800043a:	2280      	movs	r2, #128	; 0x80
 800043c:	0152      	lsls	r2, r2, #5
 800043e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000440:	187a      	adds	r2, r7, r1
 8000442:	4b20      	ldr	r3, [pc, #128]	; (80004c4 <MX_TIM2_Init+0xf8>)
 8000444:	0011      	movs	r1, r2
 8000446:	0018      	movs	r0, r3
 8000448:	f001 fbde 	bl	8001c08 <HAL_TIM_ConfigClockSource>
 800044c:	1e03      	subs	r3, r0, #0
 800044e:	d001      	beq.n	8000454 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000450:	f000 f850 	bl	80004f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000454:	4b1b      	ldr	r3, [pc, #108]	; (80004c4 <MX_TIM2_Init+0xf8>)
 8000456:	0018      	movs	r0, r3
 8000458:	f001 f912 	bl	8001680 <HAL_TIM_PWM_Init>
 800045c:	1e03      	subs	r3, r0, #0
 800045e:	d001      	beq.n	8000464 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000460:	f000 f848 	bl	80004f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000464:	211c      	movs	r1, #28
 8000466:	187b      	adds	r3, r7, r1
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800046c:	187b      	adds	r3, r7, r1
 800046e:	2200      	movs	r2, #0
 8000470:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000472:	187a      	adds	r2, r7, r1
 8000474:	4b13      	ldr	r3, [pc, #76]	; (80004c4 <MX_TIM2_Init+0xf8>)
 8000476:	0011      	movs	r1, r2
 8000478:	0018      	movs	r0, r3
 800047a:	f002 f86d 	bl	8002558 <HAL_TIMEx_MasterConfigSynchronization>
 800047e:	1e03      	subs	r3, r0, #0
 8000480:	d001      	beq.n	8000486 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000482:	f000 f837 	bl	80004f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000486:	003b      	movs	r3, r7
 8000488:	2260      	movs	r2, #96	; 0x60
 800048a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 127;
 800048c:	003b      	movs	r3, r7
 800048e:	227f      	movs	r2, #127	; 0x7f
 8000490:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000492:	003b      	movs	r3, r7
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000498:	003b      	movs	r3, r7
 800049a:	2200      	movs	r2, #0
 800049c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800049e:	0039      	movs	r1, r7
 80004a0:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <MX_TIM2_Init+0xf8>)
 80004a2:	2204      	movs	r2, #4
 80004a4:	0018      	movs	r0, r3
 80004a6:	f001 faaf 	bl	8001a08 <HAL_TIM_PWM_ConfigChannel>
 80004aa:	1e03      	subs	r3, r0, #0
 80004ac:	d001      	beq.n	80004b2 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80004ae:	f000 f821 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004b2:	4b04      	ldr	r3, [pc, #16]	; (80004c4 <MX_TIM2_Init+0xf8>)
 80004b4:	0018      	movs	r0, r3
 80004b6:	f000 f863 	bl	8000580 <HAL_TIM_MspPostInit>

}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	46bd      	mov	sp, r7
 80004be:	b00e      	add	sp, #56	; 0x38
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	20000028 	.word	0x20000028

080004c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ce:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <MX_GPIO_Init+0x28>)
 80004d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004d2:	4b07      	ldr	r3, [pc, #28]	; (80004f0 <MX_GPIO_Init+0x28>)
 80004d4:	2101      	movs	r1, #1
 80004d6:	430a      	orrs	r2, r1
 80004d8:	635a      	str	r2, [r3, #52]	; 0x34
 80004da:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <MX_GPIO_Init+0x28>)
 80004dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004de:	2201      	movs	r2, #1
 80004e0:	4013      	ands	r3, r2
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]

}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	46bd      	mov	sp, r7
 80004ea:	b002      	add	sp, #8
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	40021000 	.word	0x40021000

080004f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f8:	b672      	cpsid	i
}
 80004fa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004fc:	e7fe      	b.n	80004fc <Error_Handler+0x8>
	...

08000500 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000506:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <HAL_MspInit+0x44>)
 8000508:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800050a:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_MspInit+0x44>)
 800050c:	2101      	movs	r1, #1
 800050e:	430a      	orrs	r2, r1
 8000510:	641a      	str	r2, [r3, #64]	; 0x40
 8000512:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <HAL_MspInit+0x44>)
 8000514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000516:	2201      	movs	r2, #1
 8000518:	4013      	ands	r3, r2
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051e:	4b09      	ldr	r3, [pc, #36]	; (8000544 <HAL_MspInit+0x44>)
 8000520:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000522:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_MspInit+0x44>)
 8000524:	2180      	movs	r1, #128	; 0x80
 8000526:	0549      	lsls	r1, r1, #21
 8000528:	430a      	orrs	r2, r1
 800052a:	63da      	str	r2, [r3, #60]	; 0x3c
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <HAL_MspInit+0x44>)
 800052e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000530:	2380      	movs	r3, #128	; 0x80
 8000532:	055b      	lsls	r3, r3, #21
 8000534:	4013      	ands	r3, r2
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	b002      	add	sp, #8
 8000540:	bd80      	pop	{r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	40021000 	.word	0x40021000

08000548 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	05db      	lsls	r3, r3, #23
 8000558:	429a      	cmp	r2, r3
 800055a:	d10b      	bne.n	8000574 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800055c:	4b07      	ldr	r3, [pc, #28]	; (800057c <HAL_TIM_Base_MspInit+0x34>)
 800055e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <HAL_TIM_Base_MspInit+0x34>)
 8000562:	2101      	movs	r1, #1
 8000564:	430a      	orrs	r2, r1
 8000566:	63da      	str	r2, [r3, #60]	; 0x3c
 8000568:	4b04      	ldr	r3, [pc, #16]	; (800057c <HAL_TIM_Base_MspInit+0x34>)
 800056a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800056c:	2201      	movs	r2, #1
 800056e:	4013      	ands	r3, r2
 8000570:	60fb      	str	r3, [r7, #12]
 8000572:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000574:	46c0      	nop			; (mov r8, r8)
 8000576:	46bd      	mov	sp, r7
 8000578:	b004      	add	sp, #16
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40021000 	.word	0x40021000

08000580 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b089      	sub	sp, #36	; 0x24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000588:	240c      	movs	r4, #12
 800058a:	193b      	adds	r3, r7, r4
 800058c:	0018      	movs	r0, r3
 800058e:	2314      	movs	r3, #20
 8000590:	001a      	movs	r2, r3
 8000592:	2100      	movs	r1, #0
 8000594:	f002 f86c 	bl	8002670 <memset>
  if(htim->Instance==TIM2)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	2380      	movs	r3, #128	; 0x80
 800059e:	05db      	lsls	r3, r3, #23
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d122      	bne.n	80005ea <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a4:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <HAL_TIM_MspPostInit+0x74>)
 80005a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <HAL_TIM_MspPostInit+0x74>)
 80005aa:	2101      	movs	r1, #1
 80005ac:	430a      	orrs	r2, r1
 80005ae:	635a      	str	r2, [r3, #52]	; 0x34
 80005b0:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <HAL_TIM_MspPostInit+0x74>)
 80005b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005b4:	2201      	movs	r2, #1
 80005b6:	4013      	ands	r3, r2
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005bc:	0021      	movs	r1, r4
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	2202      	movs	r2, #2
 80005c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2202      	movs	r2, #2
 80005c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2200      	movs	r2, #0
 80005d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2202      	movs	r2, #2
 80005da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005dc:	187a      	adds	r2, r7, r1
 80005de:	23a0      	movs	r3, #160	; 0xa0
 80005e0:	05db      	lsls	r3, r3, #23
 80005e2:	0011      	movs	r1, r2
 80005e4:	0018      	movs	r0, r3
 80005e6:	f000 f9ab 	bl	8000940 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	46bd      	mov	sp, r7
 80005ee:	b009      	add	sp, #36	; 0x24
 80005f0:	bd90      	pop	{r4, r7, pc}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	40021000 	.word	0x40021000

080005f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <NMI_Handler+0x4>

080005fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000602:	e7fe      	b.n	8000602 <HardFault_Handler+0x4>

08000604 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000608:	46c0      	nop			; (mov r8, r8)
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}

0800060e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800061c:	f000 f89c 	bl	8000758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000620:	46c0      	nop			; (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000630:	480d      	ldr	r0, [pc, #52]	; (8000668 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000632:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000634:	f7ff fff7 	bl	8000626 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000638:	480c      	ldr	r0, [pc, #48]	; (800066c <LoopForever+0x6>)
  ldr r1, =_edata
 800063a:	490d      	ldr	r1, [pc, #52]	; (8000670 <LoopForever+0xa>)
  ldr r2, =_sidata
 800063c:	4a0d      	ldr	r2, [pc, #52]	; (8000674 <LoopForever+0xe>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000640:	e002      	b.n	8000648 <LoopCopyDataInit>

08000642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000646:	3304      	adds	r3, #4

08000648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800064c:	d3f9      	bcc.n	8000642 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064e:	4a0a      	ldr	r2, [pc, #40]	; (8000678 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000650:	4c0a      	ldr	r4, [pc, #40]	; (800067c <LoopForever+0x16>)
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000654:	e001      	b.n	800065a <LoopFillZerobss>

08000656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000658:	3204      	adds	r2, #4

0800065a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800065c:	d3fb      	bcc.n	8000656 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800065e:	f001 ffe3 	bl	8002628 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000662:	f7ff fe05 	bl	8000270 <main>

08000666 <LoopForever>:

LoopForever:
  b LoopForever
 8000666:	e7fe      	b.n	8000666 <LoopForever>
  ldr   r0, =_estack
 8000668:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800066c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000670:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000674:	08002734 	.word	0x08002734
  ldr r2, =_sbss
 8000678:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800067c:	20000078 	.word	0x20000078

08000680 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000680:	e7fe      	b.n	8000680 <ADC1_IRQHandler>
	...

08000684 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800068a:	1dfb      	adds	r3, r7, #7
 800068c:	2200      	movs	r2, #0
 800068e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000690:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <HAL_Init+0x3c>)
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <HAL_Init+0x3c>)
 8000696:	2180      	movs	r1, #128	; 0x80
 8000698:	0049      	lsls	r1, r1, #1
 800069a:	430a      	orrs	r2, r1
 800069c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800069e:	2003      	movs	r0, #3
 80006a0:	f000 f810 	bl	80006c4 <HAL_InitTick>
 80006a4:	1e03      	subs	r3, r0, #0
 80006a6:	d003      	beq.n	80006b0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80006a8:	1dfb      	adds	r3, r7, #7
 80006aa:	2201      	movs	r2, #1
 80006ac:	701a      	strb	r2, [r3, #0]
 80006ae:	e001      	b.n	80006b4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80006b0:	f7ff ff26 	bl	8000500 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006b4:	1dfb      	adds	r3, r7, #7
 80006b6:	781b      	ldrb	r3, [r3, #0]
}
 80006b8:	0018      	movs	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b002      	add	sp, #8
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40022000 	.word	0x40022000

080006c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c4:	b590      	push	{r4, r7, lr}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006cc:	230f      	movs	r3, #15
 80006ce:	18fb      	adds	r3, r7, r3
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80006d4:	4b1d      	ldr	r3, [pc, #116]	; (800074c <HAL_InitTick+0x88>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d02b      	beq.n	8000734 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80006dc:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <HAL_InitTick+0x8c>)
 80006de:	681c      	ldr	r4, [r3, #0]
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <HAL_InitTick+0x88>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	0019      	movs	r1, r3
 80006e6:	23fa      	movs	r3, #250	; 0xfa
 80006e8:	0098      	lsls	r0, r3, #2
 80006ea:	f7ff fd0b 	bl	8000104 <__udivsi3>
 80006ee:	0003      	movs	r3, r0
 80006f0:	0019      	movs	r1, r3
 80006f2:	0020      	movs	r0, r4
 80006f4:	f7ff fd06 	bl	8000104 <__udivsi3>
 80006f8:	0003      	movs	r3, r0
 80006fa:	0018      	movs	r0, r3
 80006fc:	f000 f913 	bl	8000926 <HAL_SYSTICK_Config>
 8000700:	1e03      	subs	r3, r0, #0
 8000702:	d112      	bne.n	800072a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2b03      	cmp	r3, #3
 8000708:	d80a      	bhi.n	8000720 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800070a:	6879      	ldr	r1, [r7, #4]
 800070c:	2301      	movs	r3, #1
 800070e:	425b      	negs	r3, r3
 8000710:	2200      	movs	r2, #0
 8000712:	0018      	movs	r0, r3
 8000714:	f000 f8f2 	bl	80008fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000718:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <HAL_InitTick+0x90>)
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	e00d      	b.n	800073c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000720:	230f      	movs	r3, #15
 8000722:	18fb      	adds	r3, r7, r3
 8000724:	2201      	movs	r2, #1
 8000726:	701a      	strb	r2, [r3, #0]
 8000728:	e008      	b.n	800073c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800072a:	230f      	movs	r3, #15
 800072c:	18fb      	adds	r3, r7, r3
 800072e:	2201      	movs	r2, #1
 8000730:	701a      	strb	r2, [r3, #0]
 8000732:	e003      	b.n	800073c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000734:	230f      	movs	r3, #15
 8000736:	18fb      	adds	r3, r7, r3
 8000738:	2201      	movs	r2, #1
 800073a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800073c:	230f      	movs	r3, #15
 800073e:	18fb      	adds	r3, r7, r3
 8000740:	781b      	ldrb	r3, [r3, #0]
}
 8000742:	0018      	movs	r0, r3
 8000744:	46bd      	mov	sp, r7
 8000746:	b005      	add	sp, #20
 8000748:	bd90      	pop	{r4, r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	20000008 	.word	0x20000008
 8000750:	20000000 	.word	0x20000000
 8000754:	20000004 	.word	0x20000004

08000758 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <HAL_IncTick+0x1c>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	001a      	movs	r2, r3
 8000762:	4b05      	ldr	r3, [pc, #20]	; (8000778 <HAL_IncTick+0x20>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	18d2      	adds	r2, r2, r3
 8000768:	4b03      	ldr	r3, [pc, #12]	; (8000778 <HAL_IncTick+0x20>)
 800076a:	601a      	str	r2, [r3, #0]
}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	20000008 	.word	0x20000008
 8000778:	20000074 	.word	0x20000074

0800077c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  return uwTick;
 8000780:	4b02      	ldr	r3, [pc, #8]	; (800078c <HAL_GetTick+0x10>)
 8000782:	681b      	ldr	r3, [r3, #0]
}
 8000784:	0018      	movs	r0, r3
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	20000074 	.word	0x20000074

08000790 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000798:	f7ff fff0 	bl	800077c <HAL_GetTick>
 800079c:	0003      	movs	r3, r0
 800079e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	3301      	adds	r3, #1
 80007a8:	d005      	beq.n	80007b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007aa:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <HAL_Delay+0x44>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	001a      	movs	r2, r3
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	189b      	adds	r3, r3, r2
 80007b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	f7ff ffe0 	bl	800077c <HAL_GetTick>
 80007bc:	0002      	movs	r2, r0
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	1ad3      	subs	r3, r2, r3
 80007c2:	68fa      	ldr	r2, [r7, #12]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d8f7      	bhi.n	80007b8 <HAL_Delay+0x28>
  {
  }
}
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b004      	add	sp, #16
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	20000008 	.word	0x20000008

080007d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d8:	b590      	push	{r4, r7, lr}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	0002      	movs	r2, r0
 80007e0:	6039      	str	r1, [r7, #0]
 80007e2:	1dfb      	adds	r3, r7, #7
 80007e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007e6:	1dfb      	adds	r3, r7, #7
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b7f      	cmp	r3, #127	; 0x7f
 80007ec:	d828      	bhi.n	8000840 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ee:	4a2f      	ldr	r2, [pc, #188]	; (80008ac <__NVIC_SetPriority+0xd4>)
 80007f0:	1dfb      	adds	r3, r7, #7
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b25b      	sxtb	r3, r3
 80007f6:	089b      	lsrs	r3, r3, #2
 80007f8:	33c0      	adds	r3, #192	; 0xc0
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	589b      	ldr	r3, [r3, r2]
 80007fe:	1dfa      	adds	r2, r7, #7
 8000800:	7812      	ldrb	r2, [r2, #0]
 8000802:	0011      	movs	r1, r2
 8000804:	2203      	movs	r2, #3
 8000806:	400a      	ands	r2, r1
 8000808:	00d2      	lsls	r2, r2, #3
 800080a:	21ff      	movs	r1, #255	; 0xff
 800080c:	4091      	lsls	r1, r2
 800080e:	000a      	movs	r2, r1
 8000810:	43d2      	mvns	r2, r2
 8000812:	401a      	ands	r2, r3
 8000814:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	019b      	lsls	r3, r3, #6
 800081a:	22ff      	movs	r2, #255	; 0xff
 800081c:	401a      	ands	r2, r3
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	0018      	movs	r0, r3
 8000824:	2303      	movs	r3, #3
 8000826:	4003      	ands	r3, r0
 8000828:	00db      	lsls	r3, r3, #3
 800082a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800082c:	481f      	ldr	r0, [pc, #124]	; (80008ac <__NVIC_SetPriority+0xd4>)
 800082e:	1dfb      	adds	r3, r7, #7
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	b25b      	sxtb	r3, r3
 8000834:	089b      	lsrs	r3, r3, #2
 8000836:	430a      	orrs	r2, r1
 8000838:	33c0      	adds	r3, #192	; 0xc0
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800083e:	e031      	b.n	80008a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000840:	4a1b      	ldr	r2, [pc, #108]	; (80008b0 <__NVIC_SetPriority+0xd8>)
 8000842:	1dfb      	adds	r3, r7, #7
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	0019      	movs	r1, r3
 8000848:	230f      	movs	r3, #15
 800084a:	400b      	ands	r3, r1
 800084c:	3b08      	subs	r3, #8
 800084e:	089b      	lsrs	r3, r3, #2
 8000850:	3306      	adds	r3, #6
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	18d3      	adds	r3, r2, r3
 8000856:	3304      	adds	r3, #4
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	1dfa      	adds	r2, r7, #7
 800085c:	7812      	ldrb	r2, [r2, #0]
 800085e:	0011      	movs	r1, r2
 8000860:	2203      	movs	r2, #3
 8000862:	400a      	ands	r2, r1
 8000864:	00d2      	lsls	r2, r2, #3
 8000866:	21ff      	movs	r1, #255	; 0xff
 8000868:	4091      	lsls	r1, r2
 800086a:	000a      	movs	r2, r1
 800086c:	43d2      	mvns	r2, r2
 800086e:	401a      	ands	r2, r3
 8000870:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	019b      	lsls	r3, r3, #6
 8000876:	22ff      	movs	r2, #255	; 0xff
 8000878:	401a      	ands	r2, r3
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	0018      	movs	r0, r3
 8000880:	2303      	movs	r3, #3
 8000882:	4003      	ands	r3, r0
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000888:	4809      	ldr	r0, [pc, #36]	; (80008b0 <__NVIC_SetPriority+0xd8>)
 800088a:	1dfb      	adds	r3, r7, #7
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	001c      	movs	r4, r3
 8000890:	230f      	movs	r3, #15
 8000892:	4023      	ands	r3, r4
 8000894:	3b08      	subs	r3, #8
 8000896:	089b      	lsrs	r3, r3, #2
 8000898:	430a      	orrs	r2, r1
 800089a:	3306      	adds	r3, #6
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	18c3      	adds	r3, r0, r3
 80008a0:	3304      	adds	r3, #4
 80008a2:	601a      	str	r2, [r3, #0]
}
 80008a4:	46c0      	nop			; (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	b003      	add	sp, #12
 80008aa:	bd90      	pop	{r4, r7, pc}
 80008ac:	e000e100 	.word	0xe000e100
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	1e5a      	subs	r2, r3, #1
 80008c0:	2380      	movs	r3, #128	; 0x80
 80008c2:	045b      	lsls	r3, r3, #17
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d301      	bcc.n	80008cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008c8:	2301      	movs	r3, #1
 80008ca:	e010      	b.n	80008ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <SysTick_Config+0x44>)
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	3a01      	subs	r2, #1
 80008d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008d4:	2301      	movs	r3, #1
 80008d6:	425b      	negs	r3, r3
 80008d8:	2103      	movs	r1, #3
 80008da:	0018      	movs	r0, r3
 80008dc:	f7ff ff7c 	bl	80007d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <SysTick_Config+0x44>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008e6:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <SysTick_Config+0x44>)
 80008e8:	2207      	movs	r2, #7
 80008ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	0018      	movs	r0, r3
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b002      	add	sp, #8
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	e000e010 	.word	0xe000e010

080008fc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	60b9      	str	r1, [r7, #8]
 8000904:	607a      	str	r2, [r7, #4]
 8000906:	210f      	movs	r1, #15
 8000908:	187b      	adds	r3, r7, r1
 800090a:	1c02      	adds	r2, r0, #0
 800090c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	187b      	adds	r3, r7, r1
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	b25b      	sxtb	r3, r3
 8000916:	0011      	movs	r1, r2
 8000918:	0018      	movs	r0, r3
 800091a:	f7ff ff5d 	bl	80007d8 <__NVIC_SetPriority>
}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b004      	add	sp, #16
 8000924:	bd80      	pop	{r7, pc}

08000926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	0018      	movs	r0, r3
 8000932:	f7ff ffbf 	bl	80008b4 <SysTick_Config>
 8000936:	0003      	movs	r3, r0
}
 8000938:	0018      	movs	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	b002      	add	sp, #8
 800093e:	bd80      	pop	{r7, pc}

08000940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800094e:	e147      	b.n	8000be0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2101      	movs	r1, #1
 8000956:	697a      	ldr	r2, [r7, #20]
 8000958:	4091      	lsls	r1, r2
 800095a:	000a      	movs	r2, r1
 800095c:	4013      	ands	r3, r2
 800095e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d100      	bne.n	8000968 <HAL_GPIO_Init+0x28>
 8000966:	e138      	b.n	8000bda <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	2203      	movs	r2, #3
 800096e:	4013      	ands	r3, r2
 8000970:	2b01      	cmp	r3, #1
 8000972:	d005      	beq.n	8000980 <HAL_GPIO_Init+0x40>
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	2203      	movs	r2, #3
 800097a:	4013      	ands	r3, r2
 800097c:	2b02      	cmp	r3, #2
 800097e:	d130      	bne.n	80009e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	689b      	ldr	r3, [r3, #8]
 8000984:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	2203      	movs	r2, #3
 800098c:	409a      	lsls	r2, r3
 800098e:	0013      	movs	r3, r2
 8000990:	43da      	mvns	r2, r3
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	4013      	ands	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	68da      	ldr	r2, [r3, #12]
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	409a      	lsls	r2, r3
 80009a2:	0013      	movs	r3, r2
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	4313      	orrs	r3, r2
 80009a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009b6:	2201      	movs	r2, #1
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	409a      	lsls	r2, r3
 80009bc:	0013      	movs	r3, r2
 80009be:	43da      	mvns	r2, r3
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	4013      	ands	r3, r2
 80009c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	091b      	lsrs	r3, r3, #4
 80009cc:	2201      	movs	r2, #1
 80009ce:	401a      	ands	r2, r3
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	409a      	lsls	r2, r3
 80009d4:	0013      	movs	r3, r2
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	4313      	orrs	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	2203      	movs	r2, #3
 80009e8:	4013      	ands	r3, r2
 80009ea:	2b03      	cmp	r3, #3
 80009ec:	d017      	beq.n	8000a1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	68db      	ldr	r3, [r3, #12]
 80009f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	2203      	movs	r2, #3
 80009fa:	409a      	lsls	r2, r3
 80009fc:	0013      	movs	r3, r2
 80009fe:	43da      	mvns	r2, r3
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	4013      	ands	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	689a      	ldr	r2, [r3, #8]
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	409a      	lsls	r2, r3
 8000a10:	0013      	movs	r3, r2
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	2203      	movs	r2, #3
 8000a24:	4013      	ands	r3, r2
 8000a26:	2b02      	cmp	r3, #2
 8000a28:	d123      	bne.n	8000a72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	08da      	lsrs	r2, r3, #3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	3208      	adds	r2, #8
 8000a32:	0092      	lsls	r2, r2, #2
 8000a34:	58d3      	ldr	r3, [r2, r3]
 8000a36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	2207      	movs	r2, #7
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	220f      	movs	r2, #15
 8000a42:	409a      	lsls	r2, r3
 8000a44:	0013      	movs	r3, r2
 8000a46:	43da      	mvns	r2, r3
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	691a      	ldr	r2, [r3, #16]
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	2107      	movs	r1, #7
 8000a56:	400b      	ands	r3, r1
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	409a      	lsls	r2, r3
 8000a5c:	0013      	movs	r3, r2
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	08da      	lsrs	r2, r3, #3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3208      	adds	r2, #8
 8000a6c:	0092      	lsls	r2, r2, #2
 8000a6e:	6939      	ldr	r1, [r7, #16]
 8000a70:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	2203      	movs	r2, #3
 8000a7e:	409a      	lsls	r2, r3
 8000a80:	0013      	movs	r3, r2
 8000a82:	43da      	mvns	r2, r3
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	4013      	ands	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	2203      	movs	r2, #3
 8000a90:	401a      	ands	r2, r3
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	409a      	lsls	r2, r3
 8000a98:	0013      	movs	r3, r2
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685a      	ldr	r2, [r3, #4]
 8000aaa:	23c0      	movs	r3, #192	; 0xc0
 8000aac:	029b      	lsls	r3, r3, #10
 8000aae:	4013      	ands	r3, r2
 8000ab0:	d100      	bne.n	8000ab4 <HAL_GPIO_Init+0x174>
 8000ab2:	e092      	b.n	8000bda <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000ab4:	4a50      	ldr	r2, [pc, #320]	; (8000bf8 <HAL_GPIO_Init+0x2b8>)
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	089b      	lsrs	r3, r3, #2
 8000aba:	3318      	adds	r3, #24
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	589b      	ldr	r3, [r3, r2]
 8000ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	2203      	movs	r2, #3
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	220f      	movs	r2, #15
 8000acc:	409a      	lsls	r2, r3
 8000ace:	0013      	movs	r3, r2
 8000ad0:	43da      	mvns	r2, r3
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	23a0      	movs	r3, #160	; 0xa0
 8000adc:	05db      	lsls	r3, r3, #23
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d013      	beq.n	8000b0a <HAL_GPIO_Init+0x1ca>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a45      	ldr	r2, [pc, #276]	; (8000bfc <HAL_GPIO_Init+0x2bc>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d00d      	beq.n	8000b06 <HAL_GPIO_Init+0x1c6>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a44      	ldr	r2, [pc, #272]	; (8000c00 <HAL_GPIO_Init+0x2c0>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d007      	beq.n	8000b02 <HAL_GPIO_Init+0x1c2>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a43      	ldr	r2, [pc, #268]	; (8000c04 <HAL_GPIO_Init+0x2c4>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d101      	bne.n	8000afe <HAL_GPIO_Init+0x1be>
 8000afa:	2303      	movs	r3, #3
 8000afc:	e006      	b.n	8000b0c <HAL_GPIO_Init+0x1cc>
 8000afe:	2305      	movs	r3, #5
 8000b00:	e004      	b.n	8000b0c <HAL_GPIO_Init+0x1cc>
 8000b02:	2302      	movs	r3, #2
 8000b04:	e002      	b.n	8000b0c <HAL_GPIO_Init+0x1cc>
 8000b06:	2301      	movs	r3, #1
 8000b08:	e000      	b.n	8000b0c <HAL_GPIO_Init+0x1cc>
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	697a      	ldr	r2, [r7, #20]
 8000b0e:	2103      	movs	r1, #3
 8000b10:	400a      	ands	r2, r1
 8000b12:	00d2      	lsls	r2, r2, #3
 8000b14:	4093      	lsls	r3, r2
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000b1c:	4936      	ldr	r1, [pc, #216]	; (8000bf8 <HAL_GPIO_Init+0x2b8>)
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	089b      	lsrs	r3, r3, #2
 8000b22:	3318      	adds	r3, #24
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b2a:	4b33      	ldr	r3, [pc, #204]	; (8000bf8 <HAL_GPIO_Init+0x2b8>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	43da      	mvns	r2, r3
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	4013      	ands	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685a      	ldr	r2, [r3, #4]
 8000b3e:	2380      	movs	r3, #128	; 0x80
 8000b40:	035b      	lsls	r3, r3, #13
 8000b42:	4013      	ands	r3, r2
 8000b44:	d003      	beq.n	8000b4e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b4e:	4b2a      	ldr	r3, [pc, #168]	; (8000bf8 <HAL_GPIO_Init+0x2b8>)
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000b54:	4b28      	ldr	r3, [pc, #160]	; (8000bf8 <HAL_GPIO_Init+0x2b8>)
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	43da      	mvns	r2, r3
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	4013      	ands	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685a      	ldr	r2, [r3, #4]
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	039b      	lsls	r3, r3, #14
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	d003      	beq.n	8000b78 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b78:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <HAL_GPIO_Init+0x2b8>)
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b7e:	4a1e      	ldr	r2, [pc, #120]	; (8000bf8 <HAL_GPIO_Init+0x2b8>)
 8000b80:	2384      	movs	r3, #132	; 0x84
 8000b82:	58d3      	ldr	r3, [r2, r3]
 8000b84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	43da      	mvns	r2, r3
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685a      	ldr	r2, [r3, #4]
 8000b94:	2380      	movs	r3, #128	; 0x80
 8000b96:	029b      	lsls	r3, r3, #10
 8000b98:	4013      	ands	r3, r2
 8000b9a:	d003      	beq.n	8000ba4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ba4:	4914      	ldr	r1, [pc, #80]	; (8000bf8 <HAL_GPIO_Init+0x2b8>)
 8000ba6:	2284      	movs	r2, #132	; 0x84
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000bac:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <HAL_GPIO_Init+0x2b8>)
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	58d3      	ldr	r3, [r2, r3]
 8000bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685a      	ldr	r2, [r3, #4]
 8000bc2:	2380      	movs	r3, #128	; 0x80
 8000bc4:	025b      	lsls	r3, r3, #9
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	d003      	beq.n	8000bd2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000bd2:	4909      	ldr	r1, [pc, #36]	; (8000bf8 <HAL_GPIO_Init+0x2b8>)
 8000bd4:	2280      	movs	r2, #128	; 0x80
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	40da      	lsrs	r2, r3
 8000be8:	1e13      	subs	r3, r2, #0
 8000bea:	d000      	beq.n	8000bee <HAL_GPIO_Init+0x2ae>
 8000bec:	e6b0      	b.n	8000950 <HAL_GPIO_Init+0x10>
  }
}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b006      	add	sp, #24
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40021800 	.word	0x40021800
 8000bfc:	50000400 	.word	0x50000400
 8000c00:	50000800 	.word	0x50000800
 8000c04:	50000c00 	.word	0x50000c00

08000c08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000c10:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a19      	ldr	r2, [pc, #100]	; (8000c7c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000c16:	4013      	ands	r3, r2
 8000c18:	0019      	movs	r1, r3
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	2380      	movs	r3, #128	; 0x80
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d11f      	bne.n	8000c6c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	0013      	movs	r3, r2
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	189b      	adds	r3, r3, r2
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	4912      	ldr	r1, [pc, #72]	; (8000c84 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f7ff fa62 	bl	8000104 <__udivsi3>
 8000c40:	0003      	movs	r3, r0
 8000c42:	3301      	adds	r3, #1
 8000c44:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c46:	e008      	b.n	8000c5a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d003      	beq.n	8000c56 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	3b01      	subs	r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	e001      	b.n	8000c5a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000c56:	2303      	movs	r3, #3
 8000c58:	e009      	b.n	8000c6e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c5a:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000c5c:	695a      	ldr	r2, [r3, #20]
 8000c5e:	2380      	movs	r3, #128	; 0x80
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	401a      	ands	r2, r3
 8000c64:	2380      	movs	r3, #128	; 0x80
 8000c66:	00db      	lsls	r3, r3, #3
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d0ed      	beq.n	8000c48 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	0018      	movs	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	b004      	add	sp, #16
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	40007000 	.word	0x40007000
 8000c7c:	fffff9ff 	.word	0xfffff9ff
 8000c80:	20000000 	.word	0x20000000
 8000c84:	000f4240 	.word	0x000f4240

08000c88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d101      	bne.n	8000c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e2fe      	b.n	8001298 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	d100      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x1e>
 8000ca4:	e07c      	b.n	8000da0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ca6:	4bc3      	ldr	r3, [pc, #780]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	2238      	movs	r2, #56	; 0x38
 8000cac:	4013      	ands	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cb0:	4bc0      	ldr	r3, [pc, #768]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	2b10      	cmp	r3, #16
 8000cbe:	d102      	bne.n	8000cc6 <HAL_RCC_OscConfig+0x3e>
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	2b03      	cmp	r3, #3
 8000cc4:	d002      	beq.n	8000ccc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	2b08      	cmp	r3, #8
 8000cca:	d10b      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ccc:	4bb9      	ldr	r3, [pc, #740]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	2380      	movs	r3, #128	; 0x80
 8000cd2:	029b      	lsls	r3, r3, #10
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	d062      	beq.n	8000d9e <HAL_RCC_OscConfig+0x116>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d15e      	bne.n	8000d9e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e2d9      	b.n	8001298 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685a      	ldr	r2, [r3, #4]
 8000ce8:	2380      	movs	r3, #128	; 0x80
 8000cea:	025b      	lsls	r3, r3, #9
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d107      	bne.n	8000d00 <HAL_RCC_OscConfig+0x78>
 8000cf0:	4bb0      	ldr	r3, [pc, #704]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4baf      	ldr	r3, [pc, #700]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000cf6:	2180      	movs	r1, #128	; 0x80
 8000cf8:	0249      	lsls	r1, r1, #9
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	e020      	b.n	8000d42 <HAL_RCC_OscConfig+0xba>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685a      	ldr	r2, [r3, #4]
 8000d04:	23a0      	movs	r3, #160	; 0xa0
 8000d06:	02db      	lsls	r3, r3, #11
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d10e      	bne.n	8000d2a <HAL_RCC_OscConfig+0xa2>
 8000d0c:	4ba9      	ldr	r3, [pc, #676]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4ba8      	ldr	r3, [pc, #672]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000d12:	2180      	movs	r1, #128	; 0x80
 8000d14:	02c9      	lsls	r1, r1, #11
 8000d16:	430a      	orrs	r2, r1
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	4ba6      	ldr	r3, [pc, #664]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	4ba5      	ldr	r3, [pc, #660]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000d20:	2180      	movs	r1, #128	; 0x80
 8000d22:	0249      	lsls	r1, r1, #9
 8000d24:	430a      	orrs	r2, r1
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	e00b      	b.n	8000d42 <HAL_RCC_OscConfig+0xba>
 8000d2a:	4ba2      	ldr	r3, [pc, #648]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	4ba1      	ldr	r3, [pc, #644]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000d30:	49a1      	ldr	r1, [pc, #644]	; (8000fb8 <HAL_RCC_OscConfig+0x330>)
 8000d32:	400a      	ands	r2, r1
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	4b9f      	ldr	r3, [pc, #636]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	4b9e      	ldr	r3, [pc, #632]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000d3c:	499f      	ldr	r1, [pc, #636]	; (8000fbc <HAL_RCC_OscConfig+0x334>)
 8000d3e:	400a      	ands	r2, r1
 8000d40:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d014      	beq.n	8000d74 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d4a:	f7ff fd17 	bl	800077c <HAL_GetTick>
 8000d4e:	0003      	movs	r3, r0
 8000d50:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d52:	e008      	b.n	8000d66 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d54:	f7ff fd12 	bl	800077c <HAL_GetTick>
 8000d58:	0002      	movs	r2, r0
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	2b64      	cmp	r3, #100	; 0x64
 8000d60:	d901      	bls.n	8000d66 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000d62:	2303      	movs	r3, #3
 8000d64:	e298      	b.n	8001298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d66:	4b93      	ldr	r3, [pc, #588]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	2380      	movs	r3, #128	; 0x80
 8000d6c:	029b      	lsls	r3, r3, #10
 8000d6e:	4013      	ands	r3, r2
 8000d70:	d0f0      	beq.n	8000d54 <HAL_RCC_OscConfig+0xcc>
 8000d72:	e015      	b.n	8000da0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d74:	f7ff fd02 	bl	800077c <HAL_GetTick>
 8000d78:	0003      	movs	r3, r0
 8000d7a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d7c:	e008      	b.n	8000d90 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d7e:	f7ff fcfd 	bl	800077c <HAL_GetTick>
 8000d82:	0002      	movs	r2, r0
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	2b64      	cmp	r3, #100	; 0x64
 8000d8a:	d901      	bls.n	8000d90 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	e283      	b.n	8001298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d90:	4b88      	ldr	r3, [pc, #544]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	2380      	movs	r3, #128	; 0x80
 8000d96:	029b      	lsls	r3, r3, #10
 8000d98:	4013      	ands	r3, r2
 8000d9a:	d1f0      	bne.n	8000d7e <HAL_RCC_OscConfig+0xf6>
 8000d9c:	e000      	b.n	8000da0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d9e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2202      	movs	r2, #2
 8000da6:	4013      	ands	r3, r2
 8000da8:	d100      	bne.n	8000dac <HAL_RCC_OscConfig+0x124>
 8000daa:	e099      	b.n	8000ee0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dac:	4b81      	ldr	r3, [pc, #516]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	2238      	movs	r2, #56	; 0x38
 8000db2:	4013      	ands	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000db6:	4b7f      	ldr	r3, [pc, #508]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	2203      	movs	r2, #3
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	2b10      	cmp	r3, #16
 8000dc4:	d102      	bne.n	8000dcc <HAL_RCC_OscConfig+0x144>
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d002      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d135      	bne.n	8000e3e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000dd2:	4b78      	ldr	r3, [pc, #480]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	2380      	movs	r3, #128	; 0x80
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	4013      	ands	r3, r2
 8000ddc:	d005      	beq.n	8000dea <HAL_RCC_OscConfig+0x162>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d101      	bne.n	8000dea <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e256      	b.n	8001298 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dea:	4b72      	ldr	r3, [pc, #456]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	4a74      	ldr	r2, [pc, #464]	; (8000fc0 <HAL_RCC_OscConfig+0x338>)
 8000df0:	4013      	ands	r3, r2
 8000df2:	0019      	movs	r1, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	695b      	ldr	r3, [r3, #20]
 8000df8:	021a      	lsls	r2, r3, #8
 8000dfa:	4b6e      	ldr	r3, [pc, #440]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d112      	bne.n	8000e2c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000e06:	4b6b      	ldr	r3, [pc, #428]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a6e      	ldr	r2, [pc, #440]	; (8000fc4 <HAL_RCC_OscConfig+0x33c>)
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	0019      	movs	r1, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	691a      	ldr	r2, [r3, #16]
 8000e14:	4b67      	ldr	r3, [pc, #412]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000e16:	430a      	orrs	r2, r1
 8000e18:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000e1a:	4b66      	ldr	r3, [pc, #408]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	0adb      	lsrs	r3, r3, #11
 8000e20:	2207      	movs	r2, #7
 8000e22:	4013      	ands	r3, r2
 8000e24:	4a68      	ldr	r2, [pc, #416]	; (8000fc8 <HAL_RCC_OscConfig+0x340>)
 8000e26:	40da      	lsrs	r2, r3
 8000e28:	4b68      	ldr	r3, [pc, #416]	; (8000fcc <HAL_RCC_OscConfig+0x344>)
 8000e2a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000e2c:	4b68      	ldr	r3, [pc, #416]	; (8000fd0 <HAL_RCC_OscConfig+0x348>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	0018      	movs	r0, r3
 8000e32:	f7ff fc47 	bl	80006c4 <HAL_InitTick>
 8000e36:	1e03      	subs	r3, r0, #0
 8000e38:	d051      	beq.n	8000ede <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e22c      	b.n	8001298 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d030      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000e46:	4b5b      	ldr	r3, [pc, #364]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a5e      	ldr	r2, [pc, #376]	; (8000fc4 <HAL_RCC_OscConfig+0x33c>)
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	0019      	movs	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	691a      	ldr	r2, [r3, #16]
 8000e54:	4b57      	ldr	r3, [pc, #348]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000e56:	430a      	orrs	r2, r1
 8000e58:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000e5a:	4b56      	ldr	r3, [pc, #344]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	4b55      	ldr	r3, [pc, #340]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000e60:	2180      	movs	r1, #128	; 0x80
 8000e62:	0049      	lsls	r1, r1, #1
 8000e64:	430a      	orrs	r2, r1
 8000e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e68:	f7ff fc88 	bl	800077c <HAL_GetTick>
 8000e6c:	0003      	movs	r3, r0
 8000e6e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e70:	e008      	b.n	8000e84 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e72:	f7ff fc83 	bl	800077c <HAL_GetTick>
 8000e76:	0002      	movs	r2, r0
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d901      	bls.n	8000e84 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8000e80:	2303      	movs	r3, #3
 8000e82:	e209      	b.n	8001298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e84:	4b4b      	ldr	r3, [pc, #300]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	00db      	lsls	r3, r3, #3
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	d0f0      	beq.n	8000e72 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e90:	4b48      	ldr	r3, [pc, #288]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	4a4a      	ldr	r2, [pc, #296]	; (8000fc0 <HAL_RCC_OscConfig+0x338>)
 8000e96:	4013      	ands	r3, r2
 8000e98:	0019      	movs	r1, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	021a      	lsls	r2, r3, #8
 8000ea0:	4b44      	ldr	r3, [pc, #272]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	e01b      	b.n	8000ee0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000ea8:	4b42      	ldr	r3, [pc, #264]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b41      	ldr	r3, [pc, #260]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000eae:	4949      	ldr	r1, [pc, #292]	; (8000fd4 <HAL_RCC_OscConfig+0x34c>)
 8000eb0:	400a      	ands	r2, r1
 8000eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eb4:	f7ff fc62 	bl	800077c <HAL_GetTick>
 8000eb8:	0003      	movs	r3, r0
 8000eba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ebc:	e008      	b.n	8000ed0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ebe:	f7ff fc5d 	bl	800077c <HAL_GetTick>
 8000ec2:	0002      	movs	r2, r0
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d901      	bls.n	8000ed0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	e1e3      	b.n	8001298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ed0:	4b38      	ldr	r3, [pc, #224]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	2380      	movs	r3, #128	; 0x80
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	4013      	ands	r3, r2
 8000eda:	d1f0      	bne.n	8000ebe <HAL_RCC_OscConfig+0x236>
 8000edc:	e000      	b.n	8000ee0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ede:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2208      	movs	r2, #8
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	d047      	beq.n	8000f7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000eea:	4b32      	ldr	r3, [pc, #200]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	2238      	movs	r2, #56	; 0x38
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	2b18      	cmp	r3, #24
 8000ef4:	d10a      	bne.n	8000f0c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000ef6:	4b2f      	ldr	r3, [pc, #188]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000efa:	2202      	movs	r2, #2
 8000efc:	4013      	ands	r3, r2
 8000efe:	d03c      	beq.n	8000f7a <HAL_RCC_OscConfig+0x2f2>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d138      	bne.n	8000f7a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e1c5      	b.n	8001298 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d019      	beq.n	8000f48 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000f14:	4b27      	ldr	r3, [pc, #156]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000f16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f18:	4b26      	ldr	r3, [pc, #152]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f20:	f7ff fc2c 	bl	800077c <HAL_GetTick>
 8000f24:	0003      	movs	r3, r0
 8000f26:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f28:	e008      	b.n	8000f3c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f2a:	f7ff fc27 	bl	800077c <HAL_GetTick>
 8000f2e:	0002      	movs	r2, r0
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d901      	bls.n	8000f3c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e1ad      	b.n	8001298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f3c:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f40:	2202      	movs	r2, #2
 8000f42:	4013      	ands	r3, r2
 8000f44:	d0f1      	beq.n	8000f2a <HAL_RCC_OscConfig+0x2a2>
 8000f46:	e018      	b.n	8000f7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000f48:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000f4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f4c:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000f4e:	2101      	movs	r1, #1
 8000f50:	438a      	bics	r2, r1
 8000f52:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f54:	f7ff fc12 	bl	800077c <HAL_GetTick>
 8000f58:	0003      	movs	r3, r0
 8000f5a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f5c:	e008      	b.n	8000f70 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f5e:	f7ff fc0d 	bl	800077c <HAL_GetTick>
 8000f62:	0002      	movs	r2, r0
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d901      	bls.n	8000f70 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e193      	b.n	8001298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f70:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f74:	2202      	movs	r2, #2
 8000f76:	4013      	ands	r3, r2
 8000f78:	d1f1      	bne.n	8000f5e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2204      	movs	r2, #4
 8000f80:	4013      	ands	r3, r2
 8000f82:	d100      	bne.n	8000f86 <HAL_RCC_OscConfig+0x2fe>
 8000f84:	e0c6      	b.n	8001114 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f86:	231f      	movs	r3, #31
 8000f88:	18fb      	adds	r3, r7, r3
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	2238      	movs	r2, #56	; 0x38
 8000f94:	4013      	ands	r3, r2
 8000f96:	2b20      	cmp	r3, #32
 8000f98:	d11e      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_RCC_OscConfig+0x32c>)
 8000f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	d100      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x31e>
 8000fa4:	e0b6      	b.n	8001114 <HAL_RCC_OscConfig+0x48c>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d000      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x328>
 8000fae:	e0b1      	b.n	8001114 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e171      	b.n	8001298 <HAL_RCC_OscConfig+0x610>
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	fffeffff 	.word	0xfffeffff
 8000fbc:	fffbffff 	.word	0xfffbffff
 8000fc0:	ffff80ff 	.word	0xffff80ff
 8000fc4:	ffffc7ff 	.word	0xffffc7ff
 8000fc8:	00f42400 	.word	0x00f42400
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	20000004 	.word	0x20000004
 8000fd4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000fd8:	4bb1      	ldr	r3, [pc, #708]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 8000fda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fdc:	2380      	movs	r3, #128	; 0x80
 8000fde:	055b      	lsls	r3, r3, #21
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	d101      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x360>
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e000      	b.n	8000fea <HAL_RCC_OscConfig+0x362>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d011      	beq.n	8001012 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	4bac      	ldr	r3, [pc, #688]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 8000ff0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ff2:	4bab      	ldr	r3, [pc, #684]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 8000ff4:	2180      	movs	r1, #128	; 0x80
 8000ff6:	0549      	lsls	r1, r1, #21
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ffc:	4ba8      	ldr	r3, [pc, #672]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 8000ffe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001000:	2380      	movs	r3, #128	; 0x80
 8001002:	055b      	lsls	r3, r3, #21
 8001004:	4013      	ands	r3, r2
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800100a:	231f      	movs	r3, #31
 800100c:	18fb      	adds	r3, r7, r3
 800100e:	2201      	movs	r2, #1
 8001010:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001012:	4ba4      	ldr	r3, [pc, #656]	; (80012a4 <HAL_RCC_OscConfig+0x61c>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	2380      	movs	r3, #128	; 0x80
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4013      	ands	r3, r2
 800101c:	d11a      	bne.n	8001054 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800101e:	4ba1      	ldr	r3, [pc, #644]	; (80012a4 <HAL_RCC_OscConfig+0x61c>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	4ba0      	ldr	r3, [pc, #640]	; (80012a4 <HAL_RCC_OscConfig+0x61c>)
 8001024:	2180      	movs	r1, #128	; 0x80
 8001026:	0049      	lsls	r1, r1, #1
 8001028:	430a      	orrs	r2, r1
 800102a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800102c:	f7ff fba6 	bl	800077c <HAL_GetTick>
 8001030:	0003      	movs	r3, r0
 8001032:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001034:	e008      	b.n	8001048 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001036:	f7ff fba1 	bl	800077c <HAL_GetTick>
 800103a:	0002      	movs	r2, r0
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d901      	bls.n	8001048 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e127      	b.n	8001298 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001048:	4b96      	ldr	r3, [pc, #600]	; (80012a4 <HAL_RCC_OscConfig+0x61c>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	4013      	ands	r3, r2
 8001052:	d0f0      	beq.n	8001036 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d106      	bne.n	800106a <HAL_RCC_OscConfig+0x3e2>
 800105c:	4b90      	ldr	r3, [pc, #576]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 800105e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001060:	4b8f      	ldr	r3, [pc, #572]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 8001062:	2101      	movs	r1, #1
 8001064:	430a      	orrs	r2, r1
 8001066:	65da      	str	r2, [r3, #92]	; 0x5c
 8001068:	e01c      	b.n	80010a4 <HAL_RCC_OscConfig+0x41c>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	2b05      	cmp	r3, #5
 8001070:	d10c      	bne.n	800108c <HAL_RCC_OscConfig+0x404>
 8001072:	4b8b      	ldr	r3, [pc, #556]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 8001074:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001076:	4b8a      	ldr	r3, [pc, #552]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 8001078:	2104      	movs	r1, #4
 800107a:	430a      	orrs	r2, r1
 800107c:	65da      	str	r2, [r3, #92]	; 0x5c
 800107e:	4b88      	ldr	r3, [pc, #544]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 8001080:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001082:	4b87      	ldr	r3, [pc, #540]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 8001084:	2101      	movs	r1, #1
 8001086:	430a      	orrs	r2, r1
 8001088:	65da      	str	r2, [r3, #92]	; 0x5c
 800108a:	e00b      	b.n	80010a4 <HAL_RCC_OscConfig+0x41c>
 800108c:	4b84      	ldr	r3, [pc, #528]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 800108e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001090:	4b83      	ldr	r3, [pc, #524]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 8001092:	2101      	movs	r1, #1
 8001094:	438a      	bics	r2, r1
 8001096:	65da      	str	r2, [r3, #92]	; 0x5c
 8001098:	4b81      	ldr	r3, [pc, #516]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 800109a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800109c:	4b80      	ldr	r3, [pc, #512]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 800109e:	2104      	movs	r1, #4
 80010a0:	438a      	bics	r2, r1
 80010a2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d014      	beq.n	80010d6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ac:	f7ff fb66 	bl	800077c <HAL_GetTick>
 80010b0:	0003      	movs	r3, r0
 80010b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010b4:	e009      	b.n	80010ca <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010b6:	f7ff fb61 	bl	800077c <HAL_GetTick>
 80010ba:	0002      	movs	r2, r0
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	4a79      	ldr	r2, [pc, #484]	; (80012a8 <HAL_RCC_OscConfig+0x620>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d901      	bls.n	80010ca <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e0e6      	b.n	8001298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010ca:	4b75      	ldr	r3, [pc, #468]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 80010cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ce:	2202      	movs	r2, #2
 80010d0:	4013      	ands	r3, r2
 80010d2:	d0f0      	beq.n	80010b6 <HAL_RCC_OscConfig+0x42e>
 80010d4:	e013      	b.n	80010fe <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d6:	f7ff fb51 	bl	800077c <HAL_GetTick>
 80010da:	0003      	movs	r3, r0
 80010dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010de:	e009      	b.n	80010f4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010e0:	f7ff fb4c 	bl	800077c <HAL_GetTick>
 80010e4:	0002      	movs	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	4a6f      	ldr	r2, [pc, #444]	; (80012a8 <HAL_RCC_OscConfig+0x620>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e0d1      	b.n	8001298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010f4:	4b6a      	ldr	r3, [pc, #424]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 80010f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f8:	2202      	movs	r2, #2
 80010fa:	4013      	ands	r3, r2
 80010fc:	d1f0      	bne.n	80010e0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80010fe:	231f      	movs	r3, #31
 8001100:	18fb      	adds	r3, r7, r3
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d105      	bne.n	8001114 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001108:	4b65      	ldr	r3, [pc, #404]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 800110a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800110c:	4b64      	ldr	r3, [pc, #400]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 800110e:	4967      	ldr	r1, [pc, #412]	; (80012ac <HAL_RCC_OscConfig+0x624>)
 8001110:	400a      	ands	r2, r1
 8001112:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	69db      	ldr	r3, [r3, #28]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d100      	bne.n	800111e <HAL_RCC_OscConfig+0x496>
 800111c:	e0bb      	b.n	8001296 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800111e:	4b60      	ldr	r3, [pc, #384]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	2238      	movs	r2, #56	; 0x38
 8001124:	4013      	ands	r3, r2
 8001126:	2b10      	cmp	r3, #16
 8001128:	d100      	bne.n	800112c <HAL_RCC_OscConfig+0x4a4>
 800112a:	e07b      	b.n	8001224 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	69db      	ldr	r3, [r3, #28]
 8001130:	2b02      	cmp	r3, #2
 8001132:	d156      	bne.n	80011e2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001134:	4b5a      	ldr	r3, [pc, #360]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b59      	ldr	r3, [pc, #356]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 800113a:	495d      	ldr	r1, [pc, #372]	; (80012b0 <HAL_RCC_OscConfig+0x628>)
 800113c:	400a      	ands	r2, r1
 800113e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001140:	f7ff fb1c 	bl	800077c <HAL_GetTick>
 8001144:	0003      	movs	r3, r0
 8001146:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001148:	e008      	b.n	800115c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800114a:	f7ff fb17 	bl	800077c <HAL_GetTick>
 800114e:	0002      	movs	r2, r0
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	2b02      	cmp	r3, #2
 8001156:	d901      	bls.n	800115c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e09d      	b.n	8001298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800115c:	4b50      	ldr	r3, [pc, #320]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	049b      	lsls	r3, r3, #18
 8001164:	4013      	ands	r3, r2
 8001166:	d1f0      	bne.n	800114a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001168:	4b4d      	ldr	r3, [pc, #308]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	4a51      	ldr	r2, [pc, #324]	; (80012b4 <HAL_RCC_OscConfig+0x62c>)
 800116e:	4013      	ands	r3, r2
 8001170:	0019      	movs	r1, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a1a      	ldr	r2, [r3, #32]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117a:	431a      	orrs	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	431a      	orrs	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001188:	431a      	orrs	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	431a      	orrs	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001194:	431a      	orrs	r2, r3
 8001196:	4b42      	ldr	r3, [pc, #264]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 8001198:	430a      	orrs	r2, r1
 800119a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800119c:	4b40      	ldr	r3, [pc, #256]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b3f      	ldr	r3, [pc, #252]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 80011a2:	2180      	movs	r1, #128	; 0x80
 80011a4:	0449      	lsls	r1, r1, #17
 80011a6:	430a      	orrs	r2, r1
 80011a8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80011aa:	4b3d      	ldr	r3, [pc, #244]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 80011ac:	68da      	ldr	r2, [r3, #12]
 80011ae:	4b3c      	ldr	r3, [pc, #240]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 80011b0:	2180      	movs	r1, #128	; 0x80
 80011b2:	0549      	lsls	r1, r1, #21
 80011b4:	430a      	orrs	r2, r1
 80011b6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b8:	f7ff fae0 	bl	800077c <HAL_GetTick>
 80011bc:	0003      	movs	r3, r0
 80011be:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011c2:	f7ff fadb 	bl	800077c <HAL_GetTick>
 80011c6:	0002      	movs	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e061      	b.n	8001298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011d4:	4b32      	ldr	r3, [pc, #200]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	2380      	movs	r3, #128	; 0x80
 80011da:	049b      	lsls	r3, r3, #18
 80011dc:	4013      	ands	r3, r2
 80011de:	d0f0      	beq.n	80011c2 <HAL_RCC_OscConfig+0x53a>
 80011e0:	e059      	b.n	8001296 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011e2:	4b2f      	ldr	r3, [pc, #188]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	4b2e      	ldr	r3, [pc, #184]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 80011e8:	4931      	ldr	r1, [pc, #196]	; (80012b0 <HAL_RCC_OscConfig+0x628>)
 80011ea:	400a      	ands	r2, r1
 80011ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ee:	f7ff fac5 	bl	800077c <HAL_GetTick>
 80011f2:	0003      	movs	r3, r0
 80011f4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011f8:	f7ff fac0 	bl	800077c <HAL_GetTick>
 80011fc:	0002      	movs	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e046      	b.n	8001298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800120a:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	2380      	movs	r3, #128	; 0x80
 8001210:	049b      	lsls	r3, r3, #18
 8001212:	4013      	ands	r3, r2
 8001214:	d1f0      	bne.n	80011f8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001216:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 8001218:	68da      	ldr	r2, [r3, #12]
 800121a:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 800121c:	4926      	ldr	r1, [pc, #152]	; (80012b8 <HAL_RCC_OscConfig+0x630>)
 800121e:	400a      	ands	r2, r1
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	e038      	b.n	8001296 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69db      	ldr	r3, [r3, #28]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d101      	bne.n	8001230 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e033      	b.n	8001298 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <HAL_RCC_OscConfig+0x618>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	2203      	movs	r2, #3
 800123a:	401a      	ands	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	429a      	cmp	r2, r3
 8001242:	d126      	bne.n	8001292 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	2270      	movs	r2, #112	; 0x70
 8001248:	401a      	ands	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800124e:	429a      	cmp	r2, r3
 8001250:	d11f      	bne.n	8001292 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	23fe      	movs	r3, #254	; 0xfe
 8001256:	01db      	lsls	r3, r3, #7
 8001258:	401a      	ands	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001260:	429a      	cmp	r2, r3
 8001262:	d116      	bne.n	8001292 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	23f8      	movs	r3, #248	; 0xf8
 8001268:	039b      	lsls	r3, r3, #14
 800126a:	401a      	ands	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001270:	429a      	cmp	r2, r3
 8001272:	d10e      	bne.n	8001292 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	23e0      	movs	r3, #224	; 0xe0
 8001278:	051b      	lsls	r3, r3, #20
 800127a:	401a      	ands	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001280:	429a      	cmp	r2, r3
 8001282:	d106      	bne.n	8001292 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	0f5b      	lsrs	r3, r3, #29
 8001288:	075a      	lsls	r2, r3, #29
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800128e:	429a      	cmp	r2, r3
 8001290:	d001      	beq.n	8001296 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	0018      	movs	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	b008      	add	sp, #32
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40007000 	.word	0x40007000
 80012a8:	00001388 	.word	0x00001388
 80012ac:	efffffff 	.word	0xefffffff
 80012b0:	feffffff 	.word	0xfeffffff
 80012b4:	11c1808c 	.word	0x11c1808c
 80012b8:	eefefffc 	.word	0xeefefffc

080012bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d101      	bne.n	80012d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e0e9      	b.n	80014a4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012d0:	4b76      	ldr	r3, [pc, #472]	; (80014ac <HAL_RCC_ClockConfig+0x1f0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2207      	movs	r2, #7
 80012d6:	4013      	ands	r3, r2
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d91e      	bls.n	800131c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012de:	4b73      	ldr	r3, [pc, #460]	; (80014ac <HAL_RCC_ClockConfig+0x1f0>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2207      	movs	r2, #7
 80012e4:	4393      	bics	r3, r2
 80012e6:	0019      	movs	r1, r3
 80012e8:	4b70      	ldr	r3, [pc, #448]	; (80014ac <HAL_RCC_ClockConfig+0x1f0>)
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	430a      	orrs	r2, r1
 80012ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80012f0:	f7ff fa44 	bl	800077c <HAL_GetTick>
 80012f4:	0003      	movs	r3, r0
 80012f6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012f8:	e009      	b.n	800130e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012fa:	f7ff fa3f 	bl	800077c <HAL_GetTick>
 80012fe:	0002      	movs	r2, r0
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	4a6a      	ldr	r2, [pc, #424]	; (80014b0 <HAL_RCC_ClockConfig+0x1f4>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d901      	bls.n	800130e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e0ca      	b.n	80014a4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800130e:	4b67      	ldr	r3, [pc, #412]	; (80014ac <HAL_RCC_ClockConfig+0x1f0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2207      	movs	r2, #7
 8001314:	4013      	ands	r3, r2
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	429a      	cmp	r2, r3
 800131a:	d1ee      	bne.n	80012fa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2202      	movs	r2, #2
 8001322:	4013      	ands	r3, r2
 8001324:	d015      	beq.n	8001352 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2204      	movs	r2, #4
 800132c:	4013      	ands	r3, r2
 800132e:	d006      	beq.n	800133e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001330:	4b60      	ldr	r3, [pc, #384]	; (80014b4 <HAL_RCC_ClockConfig+0x1f8>)
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	4b5f      	ldr	r3, [pc, #380]	; (80014b4 <HAL_RCC_ClockConfig+0x1f8>)
 8001336:	21e0      	movs	r1, #224	; 0xe0
 8001338:	01c9      	lsls	r1, r1, #7
 800133a:	430a      	orrs	r2, r1
 800133c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800133e:	4b5d      	ldr	r3, [pc, #372]	; (80014b4 <HAL_RCC_ClockConfig+0x1f8>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	4a5d      	ldr	r2, [pc, #372]	; (80014b8 <HAL_RCC_ClockConfig+0x1fc>)
 8001344:	4013      	ands	r3, r2
 8001346:	0019      	movs	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	4b59      	ldr	r3, [pc, #356]	; (80014b4 <HAL_RCC_ClockConfig+0x1f8>)
 800134e:	430a      	orrs	r2, r1
 8001350:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2201      	movs	r2, #1
 8001358:	4013      	ands	r3, r2
 800135a:	d057      	beq.n	800140c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d107      	bne.n	8001374 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001364:	4b53      	ldr	r3, [pc, #332]	; (80014b4 <HAL_RCC_ClockConfig+0x1f8>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	029b      	lsls	r3, r3, #10
 800136c:	4013      	ands	r3, r2
 800136e:	d12b      	bne.n	80013c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e097      	b.n	80014a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b02      	cmp	r3, #2
 800137a:	d107      	bne.n	800138c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800137c:	4b4d      	ldr	r3, [pc, #308]	; (80014b4 <HAL_RCC_ClockConfig+0x1f8>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	049b      	lsls	r3, r3, #18
 8001384:	4013      	ands	r3, r2
 8001386:	d11f      	bne.n	80013c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e08b      	b.n	80014a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d107      	bne.n	80013a4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001394:	4b47      	ldr	r3, [pc, #284]	; (80014b4 <HAL_RCC_ClockConfig+0x1f8>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	2380      	movs	r3, #128	; 0x80
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	4013      	ands	r3, r2
 800139e:	d113      	bne.n	80013c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e07f      	b.n	80014a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b03      	cmp	r3, #3
 80013aa:	d106      	bne.n	80013ba <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013ac:	4b41      	ldr	r3, [pc, #260]	; (80014b4 <HAL_RCC_ClockConfig+0x1f8>)
 80013ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b0:	2202      	movs	r2, #2
 80013b2:	4013      	ands	r3, r2
 80013b4:	d108      	bne.n	80013c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e074      	b.n	80014a4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013ba:	4b3e      	ldr	r3, [pc, #248]	; (80014b4 <HAL_RCC_ClockConfig+0x1f8>)
 80013bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013be:	2202      	movs	r2, #2
 80013c0:	4013      	ands	r3, r2
 80013c2:	d101      	bne.n	80013c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e06d      	b.n	80014a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80013c8:	4b3a      	ldr	r3, [pc, #232]	; (80014b4 <HAL_RCC_ClockConfig+0x1f8>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	2207      	movs	r2, #7
 80013ce:	4393      	bics	r3, r2
 80013d0:	0019      	movs	r1, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	4b37      	ldr	r3, [pc, #220]	; (80014b4 <HAL_RCC_ClockConfig+0x1f8>)
 80013d8:	430a      	orrs	r2, r1
 80013da:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80013dc:	f7ff f9ce 	bl	800077c <HAL_GetTick>
 80013e0:	0003      	movs	r3, r0
 80013e2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013e4:	e009      	b.n	80013fa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013e6:	f7ff f9c9 	bl	800077c <HAL_GetTick>
 80013ea:	0002      	movs	r2, r0
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	4a2f      	ldr	r2, [pc, #188]	; (80014b0 <HAL_RCC_ClockConfig+0x1f4>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e054      	b.n	80014a4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013fa:	4b2e      	ldr	r3, [pc, #184]	; (80014b4 <HAL_RCC_ClockConfig+0x1f8>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	2238      	movs	r2, #56	; 0x38
 8001400:	401a      	ands	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	429a      	cmp	r2, r3
 800140a:	d1ec      	bne.n	80013e6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800140c:	4b27      	ldr	r3, [pc, #156]	; (80014ac <HAL_RCC_ClockConfig+0x1f0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2207      	movs	r2, #7
 8001412:	4013      	ands	r3, r2
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	429a      	cmp	r2, r3
 8001418:	d21e      	bcs.n	8001458 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800141a:	4b24      	ldr	r3, [pc, #144]	; (80014ac <HAL_RCC_ClockConfig+0x1f0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2207      	movs	r2, #7
 8001420:	4393      	bics	r3, r2
 8001422:	0019      	movs	r1, r3
 8001424:	4b21      	ldr	r3, [pc, #132]	; (80014ac <HAL_RCC_ClockConfig+0x1f0>)
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	430a      	orrs	r2, r1
 800142a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800142c:	f7ff f9a6 	bl	800077c <HAL_GetTick>
 8001430:	0003      	movs	r3, r0
 8001432:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001434:	e009      	b.n	800144a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001436:	f7ff f9a1 	bl	800077c <HAL_GetTick>
 800143a:	0002      	movs	r2, r0
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	4a1b      	ldr	r2, [pc, #108]	; (80014b0 <HAL_RCC_ClockConfig+0x1f4>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d901      	bls.n	800144a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e02c      	b.n	80014a4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800144a:	4b18      	ldr	r3, [pc, #96]	; (80014ac <HAL_RCC_ClockConfig+0x1f0>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2207      	movs	r2, #7
 8001450:	4013      	ands	r3, r2
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	429a      	cmp	r2, r3
 8001456:	d1ee      	bne.n	8001436 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2204      	movs	r2, #4
 800145e:	4013      	ands	r3, r2
 8001460:	d009      	beq.n	8001476 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001462:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <HAL_RCC_ClockConfig+0x1f8>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	4a15      	ldr	r2, [pc, #84]	; (80014bc <HAL_RCC_ClockConfig+0x200>)
 8001468:	4013      	ands	r3, r2
 800146a:	0019      	movs	r1, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68da      	ldr	r2, [r3, #12]
 8001470:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <HAL_RCC_ClockConfig+0x1f8>)
 8001472:	430a      	orrs	r2, r1
 8001474:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001476:	f000 f829 	bl	80014cc <HAL_RCC_GetSysClockFreq>
 800147a:	0001      	movs	r1, r0
 800147c:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <HAL_RCC_ClockConfig+0x1f8>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	220f      	movs	r2, #15
 8001484:	401a      	ands	r2, r3
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <HAL_RCC_ClockConfig+0x204>)
 8001488:	0092      	lsls	r2, r2, #2
 800148a:	58d3      	ldr	r3, [r2, r3]
 800148c:	221f      	movs	r2, #31
 800148e:	4013      	ands	r3, r2
 8001490:	000a      	movs	r2, r1
 8001492:	40da      	lsrs	r2, r3
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <HAL_RCC_ClockConfig+0x208>)
 8001496:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <HAL_RCC_ClockConfig+0x20c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	0018      	movs	r0, r3
 800149e:	f7ff f911 	bl	80006c4 <HAL_InitTick>
 80014a2:	0003      	movs	r3, r0
}
 80014a4:	0018      	movs	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b004      	add	sp, #16
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40022000 	.word	0x40022000
 80014b0:	00001388 	.word	0x00001388
 80014b4:	40021000 	.word	0x40021000
 80014b8:	fffff0ff 	.word	0xfffff0ff
 80014bc:	ffff8fff 	.word	0xffff8fff
 80014c0:	08002698 	.word	0x08002698
 80014c4:	20000000 	.word	0x20000000
 80014c8:	20000004 	.word	0x20000004

080014cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014d2:	4b3c      	ldr	r3, [pc, #240]	; (80015c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	2238      	movs	r2, #56	; 0x38
 80014d8:	4013      	ands	r3, r2
 80014da:	d10f      	bne.n	80014fc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80014dc:	4b39      	ldr	r3, [pc, #228]	; (80015c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	0adb      	lsrs	r3, r3, #11
 80014e2:	2207      	movs	r2, #7
 80014e4:	4013      	ands	r3, r2
 80014e6:	2201      	movs	r2, #1
 80014e8:	409a      	lsls	r2, r3
 80014ea:	0013      	movs	r3, r2
 80014ec:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80014ee:	6839      	ldr	r1, [r7, #0]
 80014f0:	4835      	ldr	r0, [pc, #212]	; (80015c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80014f2:	f7fe fe07 	bl	8000104 <__udivsi3>
 80014f6:	0003      	movs	r3, r0
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	e05d      	b.n	80015b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014fc:	4b31      	ldr	r3, [pc, #196]	; (80015c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2238      	movs	r2, #56	; 0x38
 8001502:	4013      	ands	r3, r2
 8001504:	2b08      	cmp	r3, #8
 8001506:	d102      	bne.n	800150e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001508:	4b30      	ldr	r3, [pc, #192]	; (80015cc <HAL_RCC_GetSysClockFreq+0x100>)
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	e054      	b.n	80015b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800150e:	4b2d      	ldr	r3, [pc, #180]	; (80015c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2238      	movs	r2, #56	; 0x38
 8001514:	4013      	ands	r3, r2
 8001516:	2b10      	cmp	r3, #16
 8001518:	d138      	bne.n	800158c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800151a:	4b2a      	ldr	r3, [pc, #168]	; (80015c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	2203      	movs	r2, #3
 8001520:	4013      	ands	r3, r2
 8001522:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001524:	4b27      	ldr	r3, [pc, #156]	; (80015c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	091b      	lsrs	r3, r3, #4
 800152a:	2207      	movs	r2, #7
 800152c:	4013      	ands	r3, r2
 800152e:	3301      	adds	r3, #1
 8001530:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2b03      	cmp	r3, #3
 8001536:	d10d      	bne.n	8001554 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	4824      	ldr	r0, [pc, #144]	; (80015cc <HAL_RCC_GetSysClockFreq+0x100>)
 800153c:	f7fe fde2 	bl	8000104 <__udivsi3>
 8001540:	0003      	movs	r3, r0
 8001542:	0019      	movs	r1, r3
 8001544:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	227f      	movs	r2, #127	; 0x7f
 800154c:	4013      	ands	r3, r2
 800154e:	434b      	muls	r3, r1
 8001550:	617b      	str	r3, [r7, #20]
        break;
 8001552:	e00d      	b.n	8001570 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001554:	68b9      	ldr	r1, [r7, #8]
 8001556:	481c      	ldr	r0, [pc, #112]	; (80015c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001558:	f7fe fdd4 	bl	8000104 <__udivsi3>
 800155c:	0003      	movs	r3, r0
 800155e:	0019      	movs	r1, r3
 8001560:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	0a1b      	lsrs	r3, r3, #8
 8001566:	227f      	movs	r2, #127	; 0x7f
 8001568:	4013      	ands	r3, r2
 800156a:	434b      	muls	r3, r1
 800156c:	617b      	str	r3, [r7, #20]
        break;
 800156e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001570:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	0f5b      	lsrs	r3, r3, #29
 8001576:	2207      	movs	r2, #7
 8001578:	4013      	ands	r3, r2
 800157a:	3301      	adds	r3, #1
 800157c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	6978      	ldr	r0, [r7, #20]
 8001582:	f7fe fdbf 	bl	8000104 <__udivsi3>
 8001586:	0003      	movs	r3, r0
 8001588:	613b      	str	r3, [r7, #16]
 800158a:	e015      	b.n	80015b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800158c:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2238      	movs	r2, #56	; 0x38
 8001592:	4013      	ands	r3, r2
 8001594:	2b20      	cmp	r3, #32
 8001596:	d103      	bne.n	80015a0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	e00b      	b.n	80015b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	2238      	movs	r2, #56	; 0x38
 80015a6:	4013      	ands	r3, r2
 80015a8:	2b18      	cmp	r3, #24
 80015aa:	d103      	bne.n	80015b4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80015ac:	23fa      	movs	r3, #250	; 0xfa
 80015ae:	01db      	lsls	r3, r3, #7
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	e001      	b.n	80015b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80015b8:	693b      	ldr	r3, [r7, #16]
}
 80015ba:	0018      	movs	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	b006      	add	sp, #24
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	40021000 	.word	0x40021000
 80015c8:	00f42400 	.word	0x00f42400
 80015cc:	007a1200 	.word	0x007a1200

080015d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e04a      	b.n	8001678 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	223d      	movs	r2, #61	; 0x3d
 80015e6:	5c9b      	ldrb	r3, [r3, r2]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d107      	bne.n	80015fe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	223c      	movs	r2, #60	; 0x3c
 80015f2:	2100      	movs	r1, #0
 80015f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	0018      	movs	r0, r3
 80015fa:	f7fe ffa5 	bl	8000548 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	223d      	movs	r2, #61	; 0x3d
 8001602:	2102      	movs	r1, #2
 8001604:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3304      	adds	r3, #4
 800160e:	0019      	movs	r1, r3
 8001610:	0010      	movs	r0, r2
 8001612:	f000 fbcf 	bl	8001db4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2248      	movs	r2, #72	; 0x48
 800161a:	2101      	movs	r1, #1
 800161c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	223e      	movs	r2, #62	; 0x3e
 8001622:	2101      	movs	r1, #1
 8001624:	5499      	strb	r1, [r3, r2]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	223f      	movs	r2, #63	; 0x3f
 800162a:	2101      	movs	r1, #1
 800162c:	5499      	strb	r1, [r3, r2]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2240      	movs	r2, #64	; 0x40
 8001632:	2101      	movs	r1, #1
 8001634:	5499      	strb	r1, [r3, r2]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2241      	movs	r2, #65	; 0x41
 800163a:	2101      	movs	r1, #1
 800163c:	5499      	strb	r1, [r3, r2]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2242      	movs	r2, #66	; 0x42
 8001642:	2101      	movs	r1, #1
 8001644:	5499      	strb	r1, [r3, r2]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2243      	movs	r2, #67	; 0x43
 800164a:	2101      	movs	r1, #1
 800164c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2244      	movs	r2, #68	; 0x44
 8001652:	2101      	movs	r1, #1
 8001654:	5499      	strb	r1, [r3, r2]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2245      	movs	r2, #69	; 0x45
 800165a:	2101      	movs	r1, #1
 800165c:	5499      	strb	r1, [r3, r2]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2246      	movs	r2, #70	; 0x46
 8001662:	2101      	movs	r1, #1
 8001664:	5499      	strb	r1, [r3, r2]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2247      	movs	r2, #71	; 0x47
 800166a:	2101      	movs	r1, #1
 800166c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	223d      	movs	r2, #61	; 0x3d
 8001672:	2101      	movs	r1, #1
 8001674:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	0018      	movs	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	b002      	add	sp, #8
 800167e:	bd80      	pop	{r7, pc}

08001680 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e04a      	b.n	8001728 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	223d      	movs	r2, #61	; 0x3d
 8001696:	5c9b      	ldrb	r3, [r3, r2]
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d107      	bne.n	80016ae <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	223c      	movs	r2, #60	; 0x3c
 80016a2:	2100      	movs	r1, #0
 80016a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	0018      	movs	r0, r3
 80016aa:	f000 f841 	bl	8001730 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	223d      	movs	r2, #61	; 0x3d
 80016b2:	2102      	movs	r1, #2
 80016b4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	3304      	adds	r3, #4
 80016be:	0019      	movs	r1, r3
 80016c0:	0010      	movs	r0, r2
 80016c2:	f000 fb77 	bl	8001db4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2248      	movs	r2, #72	; 0x48
 80016ca:	2101      	movs	r1, #1
 80016cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	223e      	movs	r2, #62	; 0x3e
 80016d2:	2101      	movs	r1, #1
 80016d4:	5499      	strb	r1, [r3, r2]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	223f      	movs	r2, #63	; 0x3f
 80016da:	2101      	movs	r1, #1
 80016dc:	5499      	strb	r1, [r3, r2]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2240      	movs	r2, #64	; 0x40
 80016e2:	2101      	movs	r1, #1
 80016e4:	5499      	strb	r1, [r3, r2]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2241      	movs	r2, #65	; 0x41
 80016ea:	2101      	movs	r1, #1
 80016ec:	5499      	strb	r1, [r3, r2]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2242      	movs	r2, #66	; 0x42
 80016f2:	2101      	movs	r1, #1
 80016f4:	5499      	strb	r1, [r3, r2]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2243      	movs	r2, #67	; 0x43
 80016fa:	2101      	movs	r1, #1
 80016fc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2244      	movs	r2, #68	; 0x44
 8001702:	2101      	movs	r1, #1
 8001704:	5499      	strb	r1, [r3, r2]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2245      	movs	r2, #69	; 0x45
 800170a:	2101      	movs	r1, #1
 800170c:	5499      	strb	r1, [r3, r2]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2246      	movs	r2, #70	; 0x46
 8001712:	2101      	movs	r1, #1
 8001714:	5499      	strb	r1, [r3, r2]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2247      	movs	r2, #71	; 0x47
 800171a:	2101      	movs	r1, #1
 800171c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	223d      	movs	r2, #61	; 0x3d
 8001722:	2101      	movs	r1, #1
 8001724:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	0018      	movs	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	b002      	add	sp, #8
 800172e:	bd80      	pop	{r7, pc}

08001730 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001738:	46c0      	nop			; (mov r8, r8)
 800173a:	46bd      	mov	sp, r7
 800173c:	b002      	add	sp, #8
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d108      	bne.n	8001762 <HAL_TIM_PWM_Start+0x22>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	223e      	movs	r2, #62	; 0x3e
 8001754:	5c9b      	ldrb	r3, [r3, r2]
 8001756:	b2db      	uxtb	r3, r3
 8001758:	3b01      	subs	r3, #1
 800175a:	1e5a      	subs	r2, r3, #1
 800175c:	4193      	sbcs	r3, r2
 800175e:	b2db      	uxtb	r3, r3
 8001760:	e037      	b.n	80017d2 <HAL_TIM_PWM_Start+0x92>
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	2b04      	cmp	r3, #4
 8001766:	d108      	bne.n	800177a <HAL_TIM_PWM_Start+0x3a>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	223f      	movs	r2, #63	; 0x3f
 800176c:	5c9b      	ldrb	r3, [r3, r2]
 800176e:	b2db      	uxtb	r3, r3
 8001770:	3b01      	subs	r3, #1
 8001772:	1e5a      	subs	r2, r3, #1
 8001774:	4193      	sbcs	r3, r2
 8001776:	b2db      	uxtb	r3, r3
 8001778:	e02b      	b.n	80017d2 <HAL_TIM_PWM_Start+0x92>
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	2b08      	cmp	r3, #8
 800177e:	d108      	bne.n	8001792 <HAL_TIM_PWM_Start+0x52>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2240      	movs	r2, #64	; 0x40
 8001784:	5c9b      	ldrb	r3, [r3, r2]
 8001786:	b2db      	uxtb	r3, r3
 8001788:	3b01      	subs	r3, #1
 800178a:	1e5a      	subs	r2, r3, #1
 800178c:	4193      	sbcs	r3, r2
 800178e:	b2db      	uxtb	r3, r3
 8001790:	e01f      	b.n	80017d2 <HAL_TIM_PWM_Start+0x92>
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	2b0c      	cmp	r3, #12
 8001796:	d108      	bne.n	80017aa <HAL_TIM_PWM_Start+0x6a>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2241      	movs	r2, #65	; 0x41
 800179c:	5c9b      	ldrb	r3, [r3, r2]
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	3b01      	subs	r3, #1
 80017a2:	1e5a      	subs	r2, r3, #1
 80017a4:	4193      	sbcs	r3, r2
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	e013      	b.n	80017d2 <HAL_TIM_PWM_Start+0x92>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	2b10      	cmp	r3, #16
 80017ae:	d108      	bne.n	80017c2 <HAL_TIM_PWM_Start+0x82>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2242      	movs	r2, #66	; 0x42
 80017b4:	5c9b      	ldrb	r3, [r3, r2]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	3b01      	subs	r3, #1
 80017ba:	1e5a      	subs	r2, r3, #1
 80017bc:	4193      	sbcs	r3, r2
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	e007      	b.n	80017d2 <HAL_TIM_PWM_Start+0x92>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2243      	movs	r2, #67	; 0x43
 80017c6:	5c9b      	ldrb	r3, [r3, r2]
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	3b01      	subs	r3, #1
 80017cc:	1e5a      	subs	r2, r3, #1
 80017ce:	4193      	sbcs	r3, r2
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e081      	b.n	80018de <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d104      	bne.n	80017ea <HAL_TIM_PWM_Start+0xaa>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	223e      	movs	r2, #62	; 0x3e
 80017e4:	2102      	movs	r1, #2
 80017e6:	5499      	strb	r1, [r3, r2]
 80017e8:	e023      	b.n	8001832 <HAL_TIM_PWM_Start+0xf2>
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d104      	bne.n	80017fa <HAL_TIM_PWM_Start+0xba>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	223f      	movs	r2, #63	; 0x3f
 80017f4:	2102      	movs	r1, #2
 80017f6:	5499      	strb	r1, [r3, r2]
 80017f8:	e01b      	b.n	8001832 <HAL_TIM_PWM_Start+0xf2>
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	2b08      	cmp	r3, #8
 80017fe:	d104      	bne.n	800180a <HAL_TIM_PWM_Start+0xca>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2240      	movs	r2, #64	; 0x40
 8001804:	2102      	movs	r1, #2
 8001806:	5499      	strb	r1, [r3, r2]
 8001808:	e013      	b.n	8001832 <HAL_TIM_PWM_Start+0xf2>
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	2b0c      	cmp	r3, #12
 800180e:	d104      	bne.n	800181a <HAL_TIM_PWM_Start+0xda>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2241      	movs	r2, #65	; 0x41
 8001814:	2102      	movs	r1, #2
 8001816:	5499      	strb	r1, [r3, r2]
 8001818:	e00b      	b.n	8001832 <HAL_TIM_PWM_Start+0xf2>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	2b10      	cmp	r3, #16
 800181e:	d104      	bne.n	800182a <HAL_TIM_PWM_Start+0xea>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2242      	movs	r2, #66	; 0x42
 8001824:	2102      	movs	r1, #2
 8001826:	5499      	strb	r1, [r3, r2]
 8001828:	e003      	b.n	8001832 <HAL_TIM_PWM_Start+0xf2>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2243      	movs	r2, #67	; 0x43
 800182e:	2102      	movs	r1, #2
 8001830:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6839      	ldr	r1, [r7, #0]
 8001838:	2201      	movs	r2, #1
 800183a:	0018      	movs	r0, r3
 800183c:	f000 fe68 	bl	8002510 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a28      	ldr	r2, [pc, #160]	; (80018e8 <HAL_TIM_PWM_Start+0x1a8>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d009      	beq.n	800185e <HAL_TIM_PWM_Start+0x11e>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a27      	ldr	r2, [pc, #156]	; (80018ec <HAL_TIM_PWM_Start+0x1ac>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d004      	beq.n	800185e <HAL_TIM_PWM_Start+0x11e>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a25      	ldr	r2, [pc, #148]	; (80018f0 <HAL_TIM_PWM_Start+0x1b0>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d101      	bne.n	8001862 <HAL_TIM_PWM_Start+0x122>
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <HAL_TIM_PWM_Start+0x124>
 8001862:	2300      	movs	r3, #0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d008      	beq.n	800187a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2180      	movs	r1, #128	; 0x80
 8001874:	0209      	lsls	r1, r1, #8
 8001876:	430a      	orrs	r2, r1
 8001878:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a1a      	ldr	r2, [pc, #104]	; (80018e8 <HAL_TIM_PWM_Start+0x1a8>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d00a      	beq.n	800189a <HAL_TIM_PWM_Start+0x15a>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	05db      	lsls	r3, r3, #23
 800188c:	429a      	cmp	r2, r3
 800188e:	d004      	beq.n	800189a <HAL_TIM_PWM_Start+0x15a>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a17      	ldr	r2, [pc, #92]	; (80018f4 <HAL_TIM_PWM_Start+0x1b4>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d116      	bne.n	80018c8 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	4a15      	ldr	r2, [pc, #84]	; (80018f8 <HAL_TIM_PWM_Start+0x1b8>)
 80018a2:	4013      	ands	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2b06      	cmp	r3, #6
 80018aa:	d016      	beq.n	80018da <HAL_TIM_PWM_Start+0x19a>
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	025b      	lsls	r3, r3, #9
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d011      	beq.n	80018da <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2101      	movs	r1, #1
 80018c2:	430a      	orrs	r2, r1
 80018c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018c6:	e008      	b.n	80018da <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2101      	movs	r1, #1
 80018d4:	430a      	orrs	r2, r1
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	e000      	b.n	80018dc <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018da:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	0018      	movs	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	b004      	add	sp, #16
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	40012c00 	.word	0x40012c00
 80018ec:	40014400 	.word	0x40014400
 80018f0:	40014800 	.word	0x40014800
 80018f4:	40000400 	.word	0x40000400
 80018f8:	00010007 	.word	0x00010007

080018fc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6839      	ldr	r1, [r7, #0]
 800190c:	2200      	movs	r2, #0
 800190e:	0018      	movs	r0, r3
 8001910:	f000 fdfe 	bl	8002510 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a35      	ldr	r2, [pc, #212]	; (80019f0 <HAL_TIM_PWM_Stop+0xf4>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d009      	beq.n	8001932 <HAL_TIM_PWM_Stop+0x36>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a34      	ldr	r2, [pc, #208]	; (80019f4 <HAL_TIM_PWM_Stop+0xf8>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d004      	beq.n	8001932 <HAL_TIM_PWM_Stop+0x36>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a32      	ldr	r2, [pc, #200]	; (80019f8 <HAL_TIM_PWM_Stop+0xfc>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d101      	bne.n	8001936 <HAL_TIM_PWM_Stop+0x3a>
 8001932:	2301      	movs	r3, #1
 8001934:	e000      	b.n	8001938 <HAL_TIM_PWM_Stop+0x3c>
 8001936:	2300      	movs	r3, #0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d013      	beq.n	8001964 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	4a2e      	ldr	r2, [pc, #184]	; (80019fc <HAL_TIM_PWM_Stop+0x100>)
 8001944:	4013      	ands	r3, r2
 8001946:	d10d      	bne.n	8001964 <HAL_TIM_PWM_Stop+0x68>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	4a2c      	ldr	r2, [pc, #176]	; (8001a00 <HAL_TIM_PWM_Stop+0x104>)
 8001950:	4013      	ands	r3, r2
 8001952:	d107      	bne.n	8001964 <HAL_TIM_PWM_Stop+0x68>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4929      	ldr	r1, [pc, #164]	; (8001a04 <HAL_TIM_PWM_Stop+0x108>)
 8001960:	400a      	ands	r2, r1
 8001962:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	4a24      	ldr	r2, [pc, #144]	; (80019fc <HAL_TIM_PWM_Stop+0x100>)
 800196c:	4013      	ands	r3, r2
 800196e:	d10d      	bne.n	800198c <HAL_TIM_PWM_Stop+0x90>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	4a22      	ldr	r2, [pc, #136]	; (8001a00 <HAL_TIM_PWM_Stop+0x104>)
 8001978:	4013      	ands	r3, r2
 800197a:	d107      	bne.n	800198c <HAL_TIM_PWM_Stop+0x90>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2101      	movs	r1, #1
 8001988:	438a      	bics	r2, r1
 800198a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d104      	bne.n	800199c <HAL_TIM_PWM_Stop+0xa0>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	223e      	movs	r2, #62	; 0x3e
 8001996:	2101      	movs	r1, #1
 8001998:	5499      	strb	r1, [r3, r2]
 800199a:	e023      	b.n	80019e4 <HAL_TIM_PWM_Stop+0xe8>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d104      	bne.n	80019ac <HAL_TIM_PWM_Stop+0xb0>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	223f      	movs	r2, #63	; 0x3f
 80019a6:	2101      	movs	r1, #1
 80019a8:	5499      	strb	r1, [r3, r2]
 80019aa:	e01b      	b.n	80019e4 <HAL_TIM_PWM_Stop+0xe8>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	2b08      	cmp	r3, #8
 80019b0:	d104      	bne.n	80019bc <HAL_TIM_PWM_Stop+0xc0>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2240      	movs	r2, #64	; 0x40
 80019b6:	2101      	movs	r1, #1
 80019b8:	5499      	strb	r1, [r3, r2]
 80019ba:	e013      	b.n	80019e4 <HAL_TIM_PWM_Stop+0xe8>
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	2b0c      	cmp	r3, #12
 80019c0:	d104      	bne.n	80019cc <HAL_TIM_PWM_Stop+0xd0>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2241      	movs	r2, #65	; 0x41
 80019c6:	2101      	movs	r1, #1
 80019c8:	5499      	strb	r1, [r3, r2]
 80019ca:	e00b      	b.n	80019e4 <HAL_TIM_PWM_Stop+0xe8>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	2b10      	cmp	r3, #16
 80019d0:	d104      	bne.n	80019dc <HAL_TIM_PWM_Stop+0xe0>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2242      	movs	r2, #66	; 0x42
 80019d6:	2101      	movs	r1, #1
 80019d8:	5499      	strb	r1, [r3, r2]
 80019da:	e003      	b.n	80019e4 <HAL_TIM_PWM_Stop+0xe8>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2243      	movs	r2, #67	; 0x43
 80019e0:	2101      	movs	r1, #1
 80019e2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	0018      	movs	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	b002      	add	sp, #8
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	40012c00 	.word	0x40012c00
 80019f4:	40014400 	.word	0x40014400
 80019f8:	40014800 	.word	0x40014800
 80019fc:	00001111 	.word	0x00001111
 8001a00:	00000444 	.word	0x00000444
 8001a04:	ffff7fff 	.word	0xffff7fff

08001a08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a14:	2317      	movs	r3, #23
 8001a16:	18fb      	adds	r3, r7, r3
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	223c      	movs	r2, #60	; 0x3c
 8001a20:	5c9b      	ldrb	r3, [r3, r2]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d101      	bne.n	8001a2a <HAL_TIM_PWM_ConfigChannel+0x22>
 8001a26:	2302      	movs	r3, #2
 8001a28:	e0e5      	b.n	8001bf6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	223c      	movs	r2, #60	; 0x3c
 8001a2e:	2101      	movs	r1, #1
 8001a30:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b14      	cmp	r3, #20
 8001a36:	d900      	bls.n	8001a3a <HAL_TIM_PWM_ConfigChannel+0x32>
 8001a38:	e0d1      	b.n	8001bde <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	009a      	lsls	r2, r3, #2
 8001a3e:	4b70      	ldr	r3, [pc, #448]	; (8001c00 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8001a40:	18d3      	adds	r3, r2, r3
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	0011      	movs	r1, r2
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f000 fa26 	bl	8001ea0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	699a      	ldr	r2, [r3, #24]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2108      	movs	r1, #8
 8001a60:	430a      	orrs	r2, r1
 8001a62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	699a      	ldr	r2, [r3, #24]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2104      	movs	r1, #4
 8001a70:	438a      	bics	r2, r1
 8001a72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6999      	ldr	r1, [r3, #24]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	691a      	ldr	r2, [r3, #16]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	619a      	str	r2, [r3, #24]
      break;
 8001a86:	e0af      	b.n	8001be8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68ba      	ldr	r2, [r7, #8]
 8001a8e:	0011      	movs	r1, r2
 8001a90:	0018      	movs	r0, r3
 8001a92:	f000 fa85 	bl	8001fa0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	699a      	ldr	r2, [r3, #24]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2180      	movs	r1, #128	; 0x80
 8001aa2:	0109      	lsls	r1, r1, #4
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	699a      	ldr	r2, [r3, #24]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4954      	ldr	r1, [pc, #336]	; (8001c04 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001ab4:	400a      	ands	r2, r1
 8001ab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6999      	ldr	r1, [r3, #24]
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	021a      	lsls	r2, r3, #8
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	619a      	str	r2, [r3, #24]
      break;
 8001acc:	e08c      	b.n	8001be8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	0011      	movs	r1, r2
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f000 fae0 	bl	800209c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	69da      	ldr	r2, [r3, #28]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2108      	movs	r1, #8
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	69da      	ldr	r2, [r3, #28]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2104      	movs	r1, #4
 8001af8:	438a      	bics	r2, r1
 8001afa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	69d9      	ldr	r1, [r3, #28]
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	691a      	ldr	r2, [r3, #16]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	61da      	str	r2, [r3, #28]
      break;
 8001b0e:	e06b      	b.n	8001be8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68ba      	ldr	r2, [r7, #8]
 8001b16:	0011      	movs	r1, r2
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f000 fb41 	bl	80021a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	69da      	ldr	r2, [r3, #28]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2180      	movs	r1, #128	; 0x80
 8001b2a:	0109      	lsls	r1, r1, #4
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	69da      	ldr	r2, [r3, #28]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4932      	ldr	r1, [pc, #200]	; (8001c04 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001b3c:	400a      	ands	r2, r1
 8001b3e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	69d9      	ldr	r1, [r3, #28]
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	021a      	lsls	r2, r3, #8
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	61da      	str	r2, [r3, #28]
      break;
 8001b54:	e048      	b.n	8001be8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	0011      	movs	r1, r2
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f000 fb82 	bl	8002268 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2108      	movs	r1, #8
 8001b70:	430a      	orrs	r2, r1
 8001b72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2104      	movs	r1, #4
 8001b80:	438a      	bics	r2, r1
 8001b82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	691a      	ldr	r2, [r3, #16]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001b96:	e027      	b.n	8001be8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	0011      	movs	r1, r2
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f000 fbbb 	bl	800231c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2180      	movs	r1, #128	; 0x80
 8001bb2:	0109      	lsls	r1, r1, #4
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4910      	ldr	r1, [pc, #64]	; (8001c04 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001bc4:	400a      	ands	r2, r1
 8001bc6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	021a      	lsls	r2, r3, #8
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001bdc:	e004      	b.n	8001be8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8001bde:	2317      	movs	r3, #23
 8001be0:	18fb      	adds	r3, r7, r3
 8001be2:	2201      	movs	r2, #1
 8001be4:	701a      	strb	r2, [r3, #0]
      break;
 8001be6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	223c      	movs	r2, #60	; 0x3c
 8001bec:	2100      	movs	r1, #0
 8001bee:	5499      	strb	r1, [r3, r2]

  return status;
 8001bf0:	2317      	movs	r3, #23
 8001bf2:	18fb      	adds	r3, r7, r3
 8001bf4:	781b      	ldrb	r3, [r3, #0]
}
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	b006      	add	sp, #24
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	080026d8 	.word	0x080026d8
 8001c04:	fffffbff 	.word	0xfffffbff

08001c08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c12:	230f      	movs	r3, #15
 8001c14:	18fb      	adds	r3, r7, r3
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	223c      	movs	r2, #60	; 0x3c
 8001c1e:	5c9b      	ldrb	r3, [r3, r2]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_TIM_ConfigClockSource+0x20>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e0bc      	b.n	8001da2 <HAL_TIM_ConfigClockSource+0x19a>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	223c      	movs	r2, #60	; 0x3c
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	223d      	movs	r2, #61	; 0x3d
 8001c34:	2102      	movs	r1, #2
 8001c36:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	4a5a      	ldr	r2, [pc, #360]	; (8001dac <HAL_TIM_ConfigClockSource+0x1a4>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	4a59      	ldr	r2, [pc, #356]	; (8001db0 <HAL_TIM_ConfigClockSource+0x1a8>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2280      	movs	r2, #128	; 0x80
 8001c5e:	0192      	lsls	r2, r2, #6
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d040      	beq.n	8001ce6 <HAL_TIM_ConfigClockSource+0xde>
 8001c64:	2280      	movs	r2, #128	; 0x80
 8001c66:	0192      	lsls	r2, r2, #6
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d900      	bls.n	8001c6e <HAL_TIM_ConfigClockSource+0x66>
 8001c6c:	e088      	b.n	8001d80 <HAL_TIM_ConfigClockSource+0x178>
 8001c6e:	2280      	movs	r2, #128	; 0x80
 8001c70:	0152      	lsls	r2, r2, #5
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d100      	bne.n	8001c78 <HAL_TIM_ConfigClockSource+0x70>
 8001c76:	e088      	b.n	8001d8a <HAL_TIM_ConfigClockSource+0x182>
 8001c78:	2280      	movs	r2, #128	; 0x80
 8001c7a:	0152      	lsls	r2, r2, #5
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d900      	bls.n	8001c82 <HAL_TIM_ConfigClockSource+0x7a>
 8001c80:	e07e      	b.n	8001d80 <HAL_TIM_ConfigClockSource+0x178>
 8001c82:	2b70      	cmp	r3, #112	; 0x70
 8001c84:	d018      	beq.n	8001cb8 <HAL_TIM_ConfigClockSource+0xb0>
 8001c86:	d900      	bls.n	8001c8a <HAL_TIM_ConfigClockSource+0x82>
 8001c88:	e07a      	b.n	8001d80 <HAL_TIM_ConfigClockSource+0x178>
 8001c8a:	2b60      	cmp	r3, #96	; 0x60
 8001c8c:	d04f      	beq.n	8001d2e <HAL_TIM_ConfigClockSource+0x126>
 8001c8e:	d900      	bls.n	8001c92 <HAL_TIM_ConfigClockSource+0x8a>
 8001c90:	e076      	b.n	8001d80 <HAL_TIM_ConfigClockSource+0x178>
 8001c92:	2b50      	cmp	r3, #80	; 0x50
 8001c94:	d03b      	beq.n	8001d0e <HAL_TIM_ConfigClockSource+0x106>
 8001c96:	d900      	bls.n	8001c9a <HAL_TIM_ConfigClockSource+0x92>
 8001c98:	e072      	b.n	8001d80 <HAL_TIM_ConfigClockSource+0x178>
 8001c9a:	2b40      	cmp	r3, #64	; 0x40
 8001c9c:	d057      	beq.n	8001d4e <HAL_TIM_ConfigClockSource+0x146>
 8001c9e:	d900      	bls.n	8001ca2 <HAL_TIM_ConfigClockSource+0x9a>
 8001ca0:	e06e      	b.n	8001d80 <HAL_TIM_ConfigClockSource+0x178>
 8001ca2:	2b30      	cmp	r3, #48	; 0x30
 8001ca4:	d063      	beq.n	8001d6e <HAL_TIM_ConfigClockSource+0x166>
 8001ca6:	d86b      	bhi.n	8001d80 <HAL_TIM_ConfigClockSource+0x178>
 8001ca8:	2b20      	cmp	r3, #32
 8001caa:	d060      	beq.n	8001d6e <HAL_TIM_ConfigClockSource+0x166>
 8001cac:	d868      	bhi.n	8001d80 <HAL_TIM_ConfigClockSource+0x178>
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d05d      	beq.n	8001d6e <HAL_TIM_ConfigClockSource+0x166>
 8001cb2:	2b10      	cmp	r3, #16
 8001cb4:	d05b      	beq.n	8001d6e <HAL_TIM_ConfigClockSource+0x166>
 8001cb6:	e063      	b.n	8001d80 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6818      	ldr	r0, [r3, #0]
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	6899      	ldr	r1, [r3, #8]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f000 fc02 	bl	80024d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2277      	movs	r2, #119	; 0x77
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	609a      	str	r2, [r3, #8]
      break;
 8001ce4:	e052      	b.n	8001d8c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6818      	ldr	r0, [r3, #0]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	6899      	ldr	r1, [r3, #8]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	f000 fbeb 	bl	80024d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2180      	movs	r1, #128	; 0x80
 8001d06:	01c9      	lsls	r1, r1, #7
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	609a      	str	r2, [r3, #8]
      break;
 8001d0c:	e03e      	b.n	8001d8c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6818      	ldr	r0, [r3, #0]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	6859      	ldr	r1, [r3, #4]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	001a      	movs	r2, r3
 8001d1c:	f000 fb5c 	bl	80023d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2150      	movs	r1, #80	; 0x50
 8001d26:	0018      	movs	r0, r3
 8001d28:	f000 fbb6 	bl	8002498 <TIM_ITRx_SetConfig>
      break;
 8001d2c:	e02e      	b.n	8001d8c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6818      	ldr	r0, [r3, #0]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	6859      	ldr	r1, [r3, #4]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	001a      	movs	r2, r3
 8001d3c:	f000 fb7a 	bl	8002434 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2160      	movs	r1, #96	; 0x60
 8001d46:	0018      	movs	r0, r3
 8001d48:	f000 fba6 	bl	8002498 <TIM_ITRx_SetConfig>
      break;
 8001d4c:	e01e      	b.n	8001d8c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	6859      	ldr	r1, [r3, #4]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	001a      	movs	r2, r3
 8001d5c:	f000 fb3c 	bl	80023d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2140      	movs	r1, #64	; 0x40
 8001d66:	0018      	movs	r0, r3
 8001d68:	f000 fb96 	bl	8002498 <TIM_ITRx_SetConfig>
      break;
 8001d6c:	e00e      	b.n	8001d8c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	0019      	movs	r1, r3
 8001d78:	0010      	movs	r0, r2
 8001d7a:	f000 fb8d 	bl	8002498 <TIM_ITRx_SetConfig>
      break;
 8001d7e:	e005      	b.n	8001d8c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001d80:	230f      	movs	r3, #15
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	2201      	movs	r2, #1
 8001d86:	701a      	strb	r2, [r3, #0]
      break;
 8001d88:	e000      	b.n	8001d8c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001d8a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	223d      	movs	r2, #61	; 0x3d
 8001d90:	2101      	movs	r1, #1
 8001d92:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	223c      	movs	r2, #60	; 0x3c
 8001d98:	2100      	movs	r1, #0
 8001d9a:	5499      	strb	r1, [r3, r2]

  return status;
 8001d9c:	230f      	movs	r3, #15
 8001d9e:	18fb      	adds	r3, r7, r3
 8001da0:	781b      	ldrb	r3, [r3, #0]
}
 8001da2:	0018      	movs	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	b004      	add	sp, #16
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	ffceff88 	.word	0xffceff88
 8001db0:	ffff00ff 	.word	0xffff00ff

08001db4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a30      	ldr	r2, [pc, #192]	; (8001e88 <TIM_Base_SetConfig+0xd4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d008      	beq.n	8001dde <TIM_Base_SetConfig+0x2a>
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	05db      	lsls	r3, r3, #23
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d003      	beq.n	8001dde <TIM_Base_SetConfig+0x2a>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a2c      	ldr	r2, [pc, #176]	; (8001e8c <TIM_Base_SetConfig+0xd8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d108      	bne.n	8001df0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2270      	movs	r2, #112	; 0x70
 8001de2:	4393      	bics	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a25      	ldr	r2, [pc, #148]	; (8001e88 <TIM_Base_SetConfig+0xd4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d014      	beq.n	8001e22 <TIM_Base_SetConfig+0x6e>
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	2380      	movs	r3, #128	; 0x80
 8001dfc:	05db      	lsls	r3, r3, #23
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d00f      	beq.n	8001e22 <TIM_Base_SetConfig+0x6e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a21      	ldr	r2, [pc, #132]	; (8001e8c <TIM_Base_SetConfig+0xd8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d00b      	beq.n	8001e22 <TIM_Base_SetConfig+0x6e>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a20      	ldr	r2, [pc, #128]	; (8001e90 <TIM_Base_SetConfig+0xdc>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d007      	beq.n	8001e22 <TIM_Base_SetConfig+0x6e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a1f      	ldr	r2, [pc, #124]	; (8001e94 <TIM_Base_SetConfig+0xe0>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d003      	beq.n	8001e22 <TIM_Base_SetConfig+0x6e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a1e      	ldr	r2, [pc, #120]	; (8001e98 <TIM_Base_SetConfig+0xe4>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d108      	bne.n	8001e34 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4a1d      	ldr	r2, [pc, #116]	; (8001e9c <TIM_Base_SetConfig+0xe8>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2280      	movs	r2, #128	; 0x80
 8001e38:	4393      	bics	r3, r2
 8001e3a:	001a      	movs	r2, r3
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <TIM_Base_SetConfig+0xd4>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d007      	beq.n	8001e72 <TIM_Base_SetConfig+0xbe>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a0b      	ldr	r2, [pc, #44]	; (8001e94 <TIM_Base_SetConfig+0xe0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d003      	beq.n	8001e72 <TIM_Base_SetConfig+0xbe>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <TIM_Base_SetConfig+0xe4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d103      	bne.n	8001e7a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	691a      	ldr	r2, [r3, #16]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	615a      	str	r2, [r3, #20]
}
 8001e80:	46c0      	nop			; (mov r8, r8)
 8001e82:	46bd      	mov	sp, r7
 8001e84:	b004      	add	sp, #16
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40012c00 	.word	0x40012c00
 8001e8c:	40000400 	.word	0x40000400
 8001e90:	40002000 	.word	0x40002000
 8001e94:	40014400 	.word	0x40014400
 8001e98:	40014800 	.word	0x40014800
 8001e9c:	fffffcff 	.word	0xfffffcff

08001ea0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	4393      	bics	r3, r2
 8001eb2:	001a      	movs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4a2e      	ldr	r2, [pc, #184]	; (8001f88 <TIM_OC1_SetConfig+0xe8>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	4393      	bics	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	4393      	bics	r3, r2
 8001eea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a24      	ldr	r2, [pc, #144]	; (8001f8c <TIM_OC1_SetConfig+0xec>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d007      	beq.n	8001f0e <TIM_OC1_SetConfig+0x6e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a23      	ldr	r2, [pc, #140]	; (8001f90 <TIM_OC1_SetConfig+0xf0>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d003      	beq.n	8001f0e <TIM_OC1_SetConfig+0x6e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a22      	ldr	r2, [pc, #136]	; (8001f94 <TIM_OC1_SetConfig+0xf4>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d10c      	bne.n	8001f28 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2208      	movs	r2, #8
 8001f12:	4393      	bics	r3, r2
 8001f14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	2204      	movs	r2, #4
 8001f24:	4393      	bics	r3, r2
 8001f26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a18      	ldr	r2, [pc, #96]	; (8001f8c <TIM_OC1_SetConfig+0xec>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d007      	beq.n	8001f40 <TIM_OC1_SetConfig+0xa0>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a17      	ldr	r2, [pc, #92]	; (8001f90 <TIM_OC1_SetConfig+0xf0>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d003      	beq.n	8001f40 <TIM_OC1_SetConfig+0xa0>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a16      	ldr	r2, [pc, #88]	; (8001f94 <TIM_OC1_SetConfig+0xf4>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d111      	bne.n	8001f64 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4a15      	ldr	r2, [pc, #84]	; (8001f98 <TIM_OC1_SetConfig+0xf8>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	4a14      	ldr	r2, [pc, #80]	; (8001f9c <TIM_OC1_SetConfig+0xfc>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	621a      	str	r2, [r3, #32]
}
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	46bd      	mov	sp, r7
 8001f82:	b006      	add	sp, #24
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	fffeff8f 	.word	0xfffeff8f
 8001f8c:	40012c00 	.word	0x40012c00
 8001f90:	40014400 	.word	0x40014400
 8001f94:	40014800 	.word	0x40014800
 8001f98:	fffffeff 	.word	0xfffffeff
 8001f9c:	fffffdff 	.word	0xfffffdff

08001fa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	2210      	movs	r2, #16
 8001fb0:	4393      	bics	r3, r2
 8001fb2:	001a      	movs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4a2c      	ldr	r2, [pc, #176]	; (8002080 <TIM_OC2_SetConfig+0xe0>)
 8001fce:	4013      	ands	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	4a2b      	ldr	r2, [pc, #172]	; (8002084 <TIM_OC2_SetConfig+0xe4>)
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	021b      	lsls	r3, r3, #8
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	2220      	movs	r2, #32
 8001fea:	4393      	bics	r3, r2
 8001fec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a22      	ldr	r2, [pc, #136]	; (8002088 <TIM_OC2_SetConfig+0xe8>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d10d      	bne.n	800201e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	2280      	movs	r2, #128	; 0x80
 8002006:	4393      	bics	r3, r2
 8002008:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	011b      	lsls	r3, r3, #4
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	4313      	orrs	r3, r2
 8002014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	2240      	movs	r2, #64	; 0x40
 800201a:	4393      	bics	r3, r2
 800201c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a19      	ldr	r2, [pc, #100]	; (8002088 <TIM_OC2_SetConfig+0xe8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d007      	beq.n	8002036 <TIM_OC2_SetConfig+0x96>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a18      	ldr	r2, [pc, #96]	; (800208c <TIM_OC2_SetConfig+0xec>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d003      	beq.n	8002036 <TIM_OC2_SetConfig+0x96>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a17      	ldr	r2, [pc, #92]	; (8002090 <TIM_OC2_SetConfig+0xf0>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d113      	bne.n	800205e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4a16      	ldr	r2, [pc, #88]	; (8002094 <TIM_OC2_SetConfig+0xf4>)
 800203a:	4013      	ands	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4a15      	ldr	r2, [pc, #84]	; (8002098 <TIM_OC2_SetConfig+0xf8>)
 8002042:	4013      	ands	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	4313      	orrs	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4313      	orrs	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	621a      	str	r2, [r3, #32]
}
 8002078:	46c0      	nop			; (mov r8, r8)
 800207a:	46bd      	mov	sp, r7
 800207c:	b006      	add	sp, #24
 800207e:	bd80      	pop	{r7, pc}
 8002080:	feff8fff 	.word	0xfeff8fff
 8002084:	fffffcff 	.word	0xfffffcff
 8002088:	40012c00 	.word	0x40012c00
 800208c:	40014400 	.word	0x40014400
 8002090:	40014800 	.word	0x40014800
 8002094:	fffffbff 	.word	0xfffffbff
 8002098:	fffff7ff 	.word	0xfffff7ff

0800209c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	4a33      	ldr	r2, [pc, #204]	; (8002178 <TIM_OC3_SetConfig+0xdc>)
 80020ac:	401a      	ands	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4a2d      	ldr	r2, [pc, #180]	; (800217c <TIM_OC3_SetConfig+0xe0>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2203      	movs	r2, #3
 80020d0:	4393      	bics	r3, r2
 80020d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	4313      	orrs	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	4a27      	ldr	r2, [pc, #156]	; (8002180 <TIM_OC3_SetConfig+0xe4>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	021b      	lsls	r3, r3, #8
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a23      	ldr	r2, [pc, #140]	; (8002184 <TIM_OC3_SetConfig+0xe8>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d10d      	bne.n	8002116 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	4a22      	ldr	r2, [pc, #136]	; (8002188 <TIM_OC3_SetConfig+0xec>)
 80020fe:	4013      	ands	r3, r2
 8002100:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	021b      	lsls	r3, r3, #8
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	4313      	orrs	r3, r2
 800210c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	4a1e      	ldr	r2, [pc, #120]	; (800218c <TIM_OC3_SetConfig+0xf0>)
 8002112:	4013      	ands	r3, r2
 8002114:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a1a      	ldr	r2, [pc, #104]	; (8002184 <TIM_OC3_SetConfig+0xe8>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d007      	beq.n	800212e <TIM_OC3_SetConfig+0x92>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a1b      	ldr	r2, [pc, #108]	; (8002190 <TIM_OC3_SetConfig+0xf4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d003      	beq.n	800212e <TIM_OC3_SetConfig+0x92>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a1a      	ldr	r2, [pc, #104]	; (8002194 <TIM_OC3_SetConfig+0xf8>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d113      	bne.n	8002156 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4a19      	ldr	r2, [pc, #100]	; (8002198 <TIM_OC3_SetConfig+0xfc>)
 8002132:	4013      	ands	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4a18      	ldr	r2, [pc, #96]	; (800219c <TIM_OC3_SetConfig+0x100>)
 800213a:	4013      	ands	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	4313      	orrs	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	011b      	lsls	r3, r3, #4
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	621a      	str	r2, [r3, #32]
}
 8002170:	46c0      	nop			; (mov r8, r8)
 8002172:	46bd      	mov	sp, r7
 8002174:	b006      	add	sp, #24
 8002176:	bd80      	pop	{r7, pc}
 8002178:	fffffeff 	.word	0xfffffeff
 800217c:	fffeff8f 	.word	0xfffeff8f
 8002180:	fffffdff 	.word	0xfffffdff
 8002184:	40012c00 	.word	0x40012c00
 8002188:	fffff7ff 	.word	0xfffff7ff
 800218c:	fffffbff 	.word	0xfffffbff
 8002190:	40014400 	.word	0x40014400
 8002194:	40014800 	.word	0x40014800
 8002198:	ffffefff 	.word	0xffffefff
 800219c:	ffffdfff 	.word	0xffffdfff

080021a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	4a26      	ldr	r2, [pc, #152]	; (8002248 <TIM_OC4_SetConfig+0xa8>)
 80021b0:	401a      	ands	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4a20      	ldr	r2, [pc, #128]	; (800224c <TIM_OC4_SetConfig+0xac>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4a1f      	ldr	r2, [pc, #124]	; (8002250 <TIM_OC4_SetConfig+0xb0>)
 80021d4:	4013      	ands	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	021b      	lsls	r3, r3, #8
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	4a1b      	ldr	r2, [pc, #108]	; (8002254 <TIM_OC4_SetConfig+0xb4>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	031b      	lsls	r3, r3, #12
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a17      	ldr	r2, [pc, #92]	; (8002258 <TIM_OC4_SetConfig+0xb8>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d007      	beq.n	8002210 <TIM_OC4_SetConfig+0x70>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a16      	ldr	r2, [pc, #88]	; (800225c <TIM_OC4_SetConfig+0xbc>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d003      	beq.n	8002210 <TIM_OC4_SetConfig+0x70>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a15      	ldr	r2, [pc, #84]	; (8002260 <TIM_OC4_SetConfig+0xc0>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d109      	bne.n	8002224 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	4a14      	ldr	r2, [pc, #80]	; (8002264 <TIM_OC4_SetConfig+0xc4>)
 8002214:	4013      	ands	r3, r2
 8002216:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	019b      	lsls	r3, r3, #6
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	4313      	orrs	r3, r2
 8002222:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	621a      	str	r2, [r3, #32]
}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	46bd      	mov	sp, r7
 8002242:	b006      	add	sp, #24
 8002244:	bd80      	pop	{r7, pc}
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	ffffefff 	.word	0xffffefff
 800224c:	feff8fff 	.word	0xfeff8fff
 8002250:	fffffcff 	.word	0xfffffcff
 8002254:	ffffdfff 	.word	0xffffdfff
 8002258:	40012c00 	.word	0x40012c00
 800225c:	40014400 	.word	0x40014400
 8002260:	40014800 	.word	0x40014800
 8002264:	ffffbfff 	.word	0xffffbfff

08002268 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	4a23      	ldr	r2, [pc, #140]	; (8002304 <TIM_OC5_SetConfig+0x9c>)
 8002278:	401a      	ands	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4a1d      	ldr	r2, [pc, #116]	; (8002308 <TIM_OC5_SetConfig+0xa0>)
 8002294:	4013      	ands	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	4313      	orrs	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4a19      	ldr	r2, [pc, #100]	; (800230c <TIM_OC5_SetConfig+0xa4>)
 80022a6:	4013      	ands	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	041b      	lsls	r3, r3, #16
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a15      	ldr	r2, [pc, #84]	; (8002310 <TIM_OC5_SetConfig+0xa8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d007      	beq.n	80022ce <TIM_OC5_SetConfig+0x66>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a14      	ldr	r2, [pc, #80]	; (8002314 <TIM_OC5_SetConfig+0xac>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d003      	beq.n	80022ce <TIM_OC5_SetConfig+0x66>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a13      	ldr	r2, [pc, #76]	; (8002318 <TIM_OC5_SetConfig+0xb0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d109      	bne.n	80022e2 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	4a0c      	ldr	r2, [pc, #48]	; (8002304 <TIM_OC5_SetConfig+0x9c>)
 80022d2:	4013      	ands	r3, r2
 80022d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	021b      	lsls	r3, r3, #8
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	4313      	orrs	r3, r2
 80022e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	621a      	str	r2, [r3, #32]
}
 80022fc:	46c0      	nop			; (mov r8, r8)
 80022fe:	46bd      	mov	sp, r7
 8002300:	b006      	add	sp, #24
 8002302:	bd80      	pop	{r7, pc}
 8002304:	fffeffff 	.word	0xfffeffff
 8002308:	fffeff8f 	.word	0xfffeff8f
 800230c:	fffdffff 	.word	0xfffdffff
 8002310:	40012c00 	.word	0x40012c00
 8002314:	40014400 	.word	0x40014400
 8002318:	40014800 	.word	0x40014800

0800231c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	4a24      	ldr	r2, [pc, #144]	; (80023bc <TIM_OC6_SetConfig+0xa0>)
 800232c:	401a      	ands	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4a1e      	ldr	r2, [pc, #120]	; (80023c0 <TIM_OC6_SetConfig+0xa4>)
 8002348:	4013      	ands	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	021b      	lsls	r3, r3, #8
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	4313      	orrs	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4a1a      	ldr	r2, [pc, #104]	; (80023c4 <TIM_OC6_SetConfig+0xa8>)
 800235c:	4013      	ands	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	051b      	lsls	r3, r3, #20
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a16      	ldr	r2, [pc, #88]	; (80023c8 <TIM_OC6_SetConfig+0xac>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d007      	beq.n	8002384 <TIM_OC6_SetConfig+0x68>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a15      	ldr	r2, [pc, #84]	; (80023cc <TIM_OC6_SetConfig+0xb0>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d003      	beq.n	8002384 <TIM_OC6_SetConfig+0x68>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a14      	ldr	r2, [pc, #80]	; (80023d0 <TIM_OC6_SetConfig+0xb4>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d109      	bne.n	8002398 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	4a13      	ldr	r2, [pc, #76]	; (80023d4 <TIM_OC6_SetConfig+0xb8>)
 8002388:	4013      	ands	r3, r2
 800238a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	029b      	lsls	r3, r3, #10
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	4313      	orrs	r3, r2
 8002396:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	621a      	str	r2, [r3, #32]
}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	46bd      	mov	sp, r7
 80023b6:	b006      	add	sp, #24
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	ffefffff 	.word	0xffefffff
 80023c0:	feff8fff 	.word	0xfeff8fff
 80023c4:	ffdfffff 	.word	0xffdfffff
 80023c8:	40012c00 	.word	0x40012c00
 80023cc:	40014400 	.word	0x40014400
 80023d0:	40014800 	.word	0x40014800
 80023d4:	fffbffff 	.word	0xfffbffff

080023d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	2201      	movs	r2, #1
 80023f0:	4393      	bics	r3, r2
 80023f2:	001a      	movs	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	22f0      	movs	r2, #240	; 0xf0
 8002402:	4393      	bics	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	011b      	lsls	r3, r3, #4
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	220a      	movs	r2, #10
 8002414:	4393      	bics	r3, r2
 8002416:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	4313      	orrs	r3, r2
 800241e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	621a      	str	r2, [r3, #32]
}
 800242c:	46c0      	nop			; (mov r8, r8)
 800242e:	46bd      	mov	sp, r7
 8002430:	b006      	add	sp, #24
 8002432:	bd80      	pop	{r7, pc}

08002434 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	2210      	movs	r2, #16
 8002446:	4393      	bics	r3, r2
 8002448:	001a      	movs	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	4a0d      	ldr	r2, [pc, #52]	; (8002494 <TIM_TI2_ConfigInputStage+0x60>)
 800245e:	4013      	ands	r3, r2
 8002460:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	031b      	lsls	r3, r3, #12
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	4313      	orrs	r3, r2
 800246a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	22a0      	movs	r2, #160	; 0xa0
 8002470:	4393      	bics	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	621a      	str	r2, [r3, #32]
}
 800248a:	46c0      	nop			; (mov r8, r8)
 800248c:	46bd      	mov	sp, r7
 800248e:	b006      	add	sp, #24
 8002490:	bd80      	pop	{r7, pc}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	ffff0fff 	.word	0xffff0fff

08002498 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4a08      	ldr	r2, [pc, #32]	; (80024cc <TIM_ITRx_SetConfig+0x34>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	2207      	movs	r2, #7
 80024b8:	4313      	orrs	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	609a      	str	r2, [r3, #8]
}
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	46bd      	mov	sp, r7
 80024c6:	b004      	add	sp, #16
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	ffcfff8f 	.word	0xffcfff8f

080024d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
 80024dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	4a09      	ldr	r2, [pc, #36]	; (800250c <TIM_ETR_SetConfig+0x3c>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	021a      	lsls	r2, r3, #8
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	431a      	orrs	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	609a      	str	r2, [r3, #8]
}
 8002504:	46c0      	nop			; (mov r8, r8)
 8002506:	46bd      	mov	sp, r7
 8002508:	b006      	add	sp, #24
 800250a:	bd80      	pop	{r7, pc}
 800250c:	ffff00ff 	.word	0xffff00ff

08002510 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	221f      	movs	r2, #31
 8002520:	4013      	ands	r3, r2
 8002522:	2201      	movs	r2, #1
 8002524:	409a      	lsls	r2, r3
 8002526:	0013      	movs	r3, r2
 8002528:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	43d2      	mvns	r2, r2
 8002532:	401a      	ands	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a1a      	ldr	r2, [r3, #32]
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	211f      	movs	r1, #31
 8002540:	400b      	ands	r3, r1
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4099      	lsls	r1, r3
 8002546:	000b      	movs	r3, r1
 8002548:	431a      	orrs	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	621a      	str	r2, [r3, #32]
}
 800254e:	46c0      	nop			; (mov r8, r8)
 8002550:	46bd      	mov	sp, r7
 8002552:	b006      	add	sp, #24
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	223c      	movs	r2, #60	; 0x3c
 8002566:	5c9b      	ldrb	r3, [r3, r2]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d101      	bne.n	8002570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800256c:	2302      	movs	r3, #2
 800256e:	e050      	b.n	8002612 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	223c      	movs	r2, #60	; 0x3c
 8002574:	2101      	movs	r1, #1
 8002576:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	223d      	movs	r2, #61	; 0x3d
 800257c:	2102      	movs	r1, #2
 800257e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a21      	ldr	r2, [pc, #132]	; (800261c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d108      	bne.n	80025ac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	4a20      	ldr	r2, [pc, #128]	; (8002620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800259e:	4013      	ands	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2270      	movs	r2, #112	; 0x70
 80025b0:	4393      	bics	r3, r2
 80025b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a14      	ldr	r2, [pc, #80]	; (800261c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d00a      	beq.n	80025e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	2380      	movs	r3, #128	; 0x80
 80025d6:	05db      	lsls	r3, r3, #23
 80025d8:	429a      	cmp	r2, r3
 80025da:	d004      	beq.n	80025e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a10      	ldr	r2, [pc, #64]	; (8002624 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d10c      	bne.n	8002600 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	2280      	movs	r2, #128	; 0x80
 80025ea:	4393      	bics	r3, r2
 80025ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	223d      	movs	r2, #61	; 0x3d
 8002604:	2101      	movs	r1, #1
 8002606:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	223c      	movs	r2, #60	; 0x3c
 800260c:	2100      	movs	r1, #0
 800260e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	0018      	movs	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	b004      	add	sp, #16
 8002618:	bd80      	pop	{r7, pc}
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	40012c00 	.word	0x40012c00
 8002620:	ff0fffff 	.word	0xff0fffff
 8002624:	40000400 	.word	0x40000400

08002628 <__libc_init_array>:
 8002628:	b570      	push	{r4, r5, r6, lr}
 800262a:	2600      	movs	r6, #0
 800262c:	4d0c      	ldr	r5, [pc, #48]	; (8002660 <__libc_init_array+0x38>)
 800262e:	4c0d      	ldr	r4, [pc, #52]	; (8002664 <__libc_init_array+0x3c>)
 8002630:	1b64      	subs	r4, r4, r5
 8002632:	10a4      	asrs	r4, r4, #2
 8002634:	42a6      	cmp	r6, r4
 8002636:	d109      	bne.n	800264c <__libc_init_array+0x24>
 8002638:	2600      	movs	r6, #0
 800263a:	f000 f821 	bl	8002680 <_init>
 800263e:	4d0a      	ldr	r5, [pc, #40]	; (8002668 <__libc_init_array+0x40>)
 8002640:	4c0a      	ldr	r4, [pc, #40]	; (800266c <__libc_init_array+0x44>)
 8002642:	1b64      	subs	r4, r4, r5
 8002644:	10a4      	asrs	r4, r4, #2
 8002646:	42a6      	cmp	r6, r4
 8002648:	d105      	bne.n	8002656 <__libc_init_array+0x2e>
 800264a:	bd70      	pop	{r4, r5, r6, pc}
 800264c:	00b3      	lsls	r3, r6, #2
 800264e:	58eb      	ldr	r3, [r5, r3]
 8002650:	4798      	blx	r3
 8002652:	3601      	adds	r6, #1
 8002654:	e7ee      	b.n	8002634 <__libc_init_array+0xc>
 8002656:	00b3      	lsls	r3, r6, #2
 8002658:	58eb      	ldr	r3, [r5, r3]
 800265a:	4798      	blx	r3
 800265c:	3601      	adds	r6, #1
 800265e:	e7f2      	b.n	8002646 <__libc_init_array+0x1e>
 8002660:	0800272c 	.word	0x0800272c
 8002664:	0800272c 	.word	0x0800272c
 8002668:	0800272c 	.word	0x0800272c
 800266c:	08002730 	.word	0x08002730

08002670 <memset>:
 8002670:	0003      	movs	r3, r0
 8002672:	1882      	adds	r2, r0, r2
 8002674:	4293      	cmp	r3, r2
 8002676:	d100      	bne.n	800267a <memset+0xa>
 8002678:	4770      	bx	lr
 800267a:	7019      	strb	r1, [r3, #0]
 800267c:	3301      	adds	r3, #1
 800267e:	e7f9      	b.n	8002674 <memset+0x4>

08002680 <_init>:
 8002680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002686:	bc08      	pop	{r3}
 8002688:	469e      	mov	lr, r3
 800268a:	4770      	bx	lr

0800268c <_fini>:
 800268c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002692:	bc08      	pop	{r3}
 8002694:	469e      	mov	lr, r3
 8002696:	4770      	bx	lr
